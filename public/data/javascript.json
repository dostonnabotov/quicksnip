[
  {
    "categoryName": "Basics",
    "snippets": [
      {
        "title": "Hello, World!",
        "description": "Prints Hello, World! to the terminal.",
        "code": [
          "console.log(\"Hello, World!\"); // Prints Hello, World! to the console"
        ],
        "tags": ["javascript", "printing", "hello-world", "utility"],
        "author": "James-Beans"
      }
    ]
  },
  {
  "title": "Roman to integer",
  "description": "Converts roman numeric system into integers",
  "code": [
  "const romanToInt = function(roman) {",
  "    let symbols = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 };",
  "    roman = Array.from(roman);",
  "    let output = 0, toMiss = [];",
  "    for(let i = 0; i < roman.length; i++) {",
  "        let curr = symbols[roman[i]];",
  "        let next = symbols[roman[i+1]];",
  "",
  "        if(!toMiss.includes(i)) {",
  "            if(next > curr) {",
  "                output+=(next-curr);",
  "                toMiss.push(i+1);",
  "            } else {",
  "                output+=curr;",
  "            }",
  "        }",
  "    }",
  "    return output;",
  "};",
  "",
  "// Usage:",
  "console.log(romanToInt(\"IXV\")); // Output: '14'"
 ],
  "tags": ["javascript", "number", "format", "roman", "utility"],
  "author": "r3medy"
},
  {
    "categoryName": "Array Manipulation",
    "snippets": [
      {
        "title": "Remove Duplicates",
        "description": "Removes duplicate values from an array.",
        "code": [
          "const removeDuplicates = (arr) => [...new Set(arr)];",
          "",
          "// Usage:",
          "const numbers = [1, 2, 2, 3, 4, 4, 5];",
          "console.log(removeDuplicates(numbers)); // Output: [1, 2, 3, 4, 5]"
        ],
        "tags": ["javascript", "array", "deduplicate", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Flatten Array",
        "description": "Flattens a multi-dimensional array.",
        "code": [
          "const flattenArray = (arr) => arr.flat(Infinity);",
          "",
          "// Usage:",
          "const nestedArray = [1, [2, [3, [4]]]];",
          "console.log(flattenArray(nestedArray)); // Output: [1, 2, 3, 4]"
        ],
        "tags": ["javascript", "array", "flatten", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Shuffle Array",
        "description": "Shuffles an Array.",
        "code": [
          "function shuffleArray(array) {",
          "    for (let i = array.length - 1; i >= 0; i--) {",
          "        const j = Math.floor(Math.random() * (i + 1));",
          "        [array[i], array[j]] = [array[j], array[i]];",
          "    }",
          "}"
        ],
        "tags": ["javascript", "array", "shuffle", "utility"],
        "author": "loxt-nixo"
      }
    ]
  },
  {
    "categoryName": "String Manipulation",
    "snippets": [
      {
        "title": "Slugify String",
        "description": "Converts a string into a URL-friendly slug format.",
        "code": [
          "const slugify = (string, separator = \"-\") => {",
          "  return string",
          "    .toString() // Cast to string (optional)",
          "    .toLowerCase() // Convert the string to lowercase letters",
          "    .trim() // Remove whitespace from both sides of a string (optional)",
          "    .replace(/\\s+/g, separator) // Replace spaces with {separator}",
          "    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars",
          "    .replace(/\\_/g, separator) // Replace _ with {separator}",
          "    .replace(/\\-\\-+/g, separator) // Replace multiple - with single {separator}",
          "    .replace(/\\-$/g, \"\"); // Remove trailing -",
          "};",
          "",
          "// Usage:",
          "const title = \"Hello, World! This is a Test.\";",
          "console.log(slugify(title)); // Output: 'hello-world-this-is-a-test'",
          "console.log(slugify(title, \"_\")); // Output: 'hello_world_this_is_a_test'"
        ],
        "tags": ["javascript", "string", "slug", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Capitalize String",
        "description": "Capitalizes the first letter of a string.",
        "code": [
          "const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);",
          "",
          "// Usage:",
          "console.log(capitalize('hello')); // Output: 'Hello'"
        ],
        "tags": ["javascript", "string", "capitalize", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Reverse String",
        "description": "Reverses the characters in a string.",
        "code": [
          "const reverseString = (str) => str.split('').reverse().join('');",
          "",
          "// Usage:",
          "console.log(reverseString('hello')); // Output: 'olleh'"
        ],
        "tags": ["javascript", "string", "reverse", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Truncate Text",
        "description": "Truncates the text to a maximum length and appends '...' if the text exceeds the maximum length.",
        "code": [
          "const truncateText = (text = '', maxLength = 50) => {",
          "  return `${text.slice(0, maxLength)}${text.length >= maxLength ? '...' : ''}`;",
          "};",
          "",
          "// Usage:",
          "const title = \"Hello, World! This is a Test.\";",
          "console.log(truncateText(title)); // Output: 'Hello, World! This is a Test.'",
          "console.log(truncateText(title, 10)); // Output: 'Hello, Wor...'"
        ],
        "tags": ["javascript", "string", "truncate", "utility", "text"],
        "author": "realvishalrana"
      },
      {
        "title": "Data with Prefix",
        "description": "Adds a prefix and postfix to data, with a fallback value.",
        "code": [
          "const dataWithPrefix = (data, fallback = '-', prefix = '', postfix = '') => {",
          "  return data ? `${prefix}${data}${postfix}` : fallback;",
          "};",
          "",
          "// Usage:",
          "console.log(dataWithPrefix('123', '-', '(', ')')); // Output: '(123)'",
          "console.log(dataWithPrefix('', '-', '(', ')')); // Output: '-'",
          "console.log(dataWithPrefix('Hello', 'N/A', 'Mr. ', '')); // Output: 'Mr. Hello'",
          "console.log(dataWithPrefix(null, 'N/A', 'Mr. ', '')); // Output: 'N/A'"
        ],
        "tags": ["javascript", "data", "utility"],
        "author": "realvishalrana"
      },
      {
        "title": "Check if String is a Palindrome",
        "description": "Checks whether a given string is a palindrome.",
        "code": [
          "function isPalindrome(str) {",
          "  const cleanStr = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();",
          "  return cleanStr === cleanStr.split('').reverse().join('');",
          "}",
          "",
          "// Example usage:",
          "console.log(isPalindrome('A man, a plan, a canal, Panama')); // Output: true"
        ],
        "tags": ["javascript", "check", "palindrome", "string"],
        "author": "axorax"
      },
      {
        "title": "Count Words in a String",
        "description": "Counts the number of words in a string.",
        "code": [
          "function countWords(str) {",
          "  return str.trim().split(/\\s+/).length;",
          "}",
          "",
          "// Example usage:",
          "console.log(countWords('Hello world! This is a test.')); // Output: 6"
        ],
        "tags": ["javascript", "string", "manipulation", "word count", "count"],
        "author": "axorax"
      },
      {
        "title": "Remove All Whitespace",
        "description": "Removes all whitespace from a string.",
        "code": [
          "function removeWhitespace(str) {",
          "  return str.replace(/\\s+/g, '');",
          "}",
          "",
          "// Example usage:",
          "console.log(removeWhitespace('Hello world!')); // Output: 'Helloworld!'"
        ],
        "tags": ["javascript", "string", "whitespace"],
        "author": "axorax"
      },
      {
        "title": "Pad String on Both Sides",
        "description": "Pads a string on both sides with a specified character until it reaches the desired length.",
        "code": [
          "function padString(str, length, char = ' ') {",
          "  const totalPad = length - str.length;",
          "  const padStart = Math.floor(totalPad / 2);",
          "  const padEnd = totalPad - padStart;",
          "  return char.repeat(padStart) + str + char.repeat(padEnd);",
          "}",
          "",
          "// Example usage:",
          "console.log(padString('hello', 10, '*')); // Output: '**hello***'"
        ],
        "tags": ["string", "pad", "manipulation"],
        "author": "axorax"
      },
      {
        "title": "Convert String to Snake Case",
        "description": "Converts a given string into snake_case.",
        "code": [
          "function toSnakeCase(str) {",
          "  return str.replace(/([a-z])([A-Z])/g, '$1_$2')",
          "            .replace(/\\s+/g, '_')",
          "            .toLowerCase();",
          "}",
          "",
          "// Example usage:",
          "console.log(toSnakeCase('Hello World Test')); // Output: 'hello_world_test'"
        ],
        "tags": ["string", "case", "snake_case"],
        "author": "axorax"
      },
      {
        "title": "Remove Vowels from a String",
        "description": "Removes all vowels from a given string.",
        "code": [
          "function removeVowels(str) {",
          "  return str.replace(/[aeiouAEIOU]/g, '');",
          "}",
          "",
          "// Example usage:",
          "console.log(removeVowels('Hello World')); // Output: 'Hll Wrld'"
        ],
        "tags": ["string", "remove", "vowels"],
        "author": "axorax"
      },
      {
        "title": "Mask Sensitive Information",
        "description": "Masks parts of a sensitive string, like a credit card or email address.",
        "code": [
          "function maskSensitiveInfo(str, visibleCount = 4, maskChar = '*') {",
          "  return str.slice(0, visibleCount) + maskChar.repeat(Math.max(0, str.length - visibleCount));",
          "}",
          "",
          "// Example usage:",
          "console.log(maskSensitiveInfo('123456789', 4)); // Output: '1234*****'",
          "console.log(maskSensitiveInfo('example@mail.com', 2, '#')); // Output: 'ex#############'"
        ],
        "tags": ["string", "mask", "sensitive"],
        "author": "axorax"
      },
      {
        "title": "Extract Initials from Name",
        "description": "Extracts and returns the initials from a full name.",
        "code": [
          "function getInitials(name) {",
          "  return name.split(' ').map(part => part.charAt(0).toUpperCase()).join('');",
          "}",
          "",
          "// Example usage:",
          "console.log(getInitials('John Doe')); // Output: 'JD'"
        ],
        "tags": ["string", "initials", "name"],
        "author": "axorax"
      },
      {
        "title": "Convert Tabs to Spaces",
        "description": "Converts all tab characters in a string to spaces.",
        "code": [
          "function tabsToSpaces(str, spacesPerTab = 4) {",
          "  return str.replace(/\\t/g, ' '.repeat(spacesPerTab));",
          "}",
          "",
          "// Example usage:",
          "console.log(tabsToSpaces('Hello\\tWorld', 2)); // Output: 'Hello  World'"
        ],
        "tags": ["string", "tabs", "spaces"],
        "author": "axorax"
      },
      {
        "title": "Random string",
        "description": "Generates a random string of characters of a certain length",
        "code": [
          "function makeid(length, characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') {",
          "  return Array.from({ length }, () => characters.charAt(Math.floor(Math.random() * characters.length))).join('');",
          "}",
          "",
          "console.log(makeid(5, \"1234\" /* (optional) */));"
        ],
        "tags": ["javascript", "function", "random"],
        "author": "kruimol"
      }
    ]
  },
  {
    "categoryName": "Object Manipulation",
    "snippets": [
      {
        "title": "Filter Object",
        "description": "Filter out entries in an object where the value is falsy, including empty strings, empty objects, null, and undefined.",
        "code": [
          "export const filterObject = (object = {}) =>",
          "  Object.fromEntries(",
          "    Object.entries(object)",
          "      .filter(([key, value]) => value !== null && value !== undefined && value !== '' && (typeof value !== 'object' || Object.keys(value).length > 0))",
          "  );",
          "",
          "// Usage:",
          "const obj1 = { a: 1, b: null, c: undefined, d: 4, e: '', f: {} };",
          "console.log(filterObject(obj1)); // Output: { a: 1, d: 4 }",
          "",
          "const obj2 = { x: 0, y: false, z: 'Hello', w: [] };",
          "console.log(filterObject(obj2)); // Output: { z: 'Hello' }",
          "",
          "const obj3 = { name: 'John', age: null, address: { city: 'New York' }, phone: '' };",
          "console.log(filterObject(obj3)); // Output: { name: 'John', address: { city: 'New York' } }",
          "",
          "const obj4 = { a: 0, b: '', c: false, d: {}, e: 'Valid' };",
          "console.log(filterObject(obj4)); // Output: { e: 'Valid' }"
        ],
        "tags": ["javascript", "object", "filter", "utility"],
        "author": "realvishalrana"
      },
      {
        "title": "Get Nested Value",
        "description": "Retrieves the value at a given path in a nested object.",
        "code": [
          "const getNestedValue = (obj, path) => {",
          "  const keys = path.split('.');",
          "  return keys.reduce((currentObject, key) => {",
          "    return currentObject && typeof currentObject === 'object' ? currentObject[key] : undefined;",
          "  }, obj);",
          "};",
          "",
          "// Usage:",
          "const obj = { a: { b: { c: 42 } } };",
          "console.log(getNestedValue(obj, 'a.b.c')); // Output: 42"
        ],
        "tags": ["javascript", "object", "nested", "utility"],
        "author": "realvishalrana"
      },
      {
        "title": "Unique By Key",
        "description": "Filters an array of objects to only include unique objects by a specified key.",
        "code": [
          "const uniqueByKey = (key, arr) =>",
          "  arr.filter((obj, index, self) => index === self.findIndex((t) => t?.[key] === obj?.[key]));",
          "",
          "// Usage:",
          "const arr = [",
          "  { id: 1, name: 'John' },",
          "  { id: 2, name: 'Jane' },",
          "  { id: 1, name: 'John' }",
          "];",
          "console.log(uniqueByKey('id', arr)); // Output: [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }]"
        ],
        "tags": ["javascript", "array", "unique", "utility"],
        "author": "realvishalrana"
      },
      {
        "title": "Merge Objects Deeply",
        "description": "Deeply merges two or more objects, including nested properties.",
        "code": [
          "function deepMerge(...objects) {",
          "  return objects.reduce((acc, obj) => {",
          "    Object.keys(obj).forEach(key => {",
          "      if (typeof obj[key] === 'object' && obj[key] !== null) {",
          "        acc[key] = deepMerge(acc[key] || {}, obj[key]);",
          "      } else {",
          "        acc[key] = obj[key];",
          "      }",
          "    });",
          "    return acc;",
          "  }, {});",
          "}",
          "",
          "// Usage:",
          "const obj1 = { a: 1, b: { c: 2 } };",
          "const obj2 = { b: { d: 3 }, e: 4 };",
          "console.log(deepMerge(obj1, obj2)); // Output: { a: 1, b: { c: 2, d: 3 }, e: 4 }"
        ],
        "tags": ["javascript", "object", "merge", "deep"],
        "author": "axorax"
      },
      {
        "title": "Omit Keys from Object",
        "description": "Creates a new object with specific keys omitted.",
        "code": [
          "function omitKeys(obj, keys) {",
          "  return Object.fromEntries(",
          "    Object.entries(obj).filter(([key]) => !keys.includes(key))",
          "  );",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2, c: 3 };",
          "console.log(omitKeys(obj, ['b', 'c'])); // Output: { a: 1 }"
        ],
        "tags": ["javascript", "object", "omit", "utility"],
        "author": "axorax"
      },
      {
        "title": "Convert Object to Query String",
        "description": "Converts an object to a query string for use in URLs.",
        "code": [
          "function toQueryString(obj) {",
          "  return Object.entries(obj)",
          "    .map(([key, value]) => encodeURIComponent(key) + '=' + encodeURIComponent(value))",
          "    .join('&');",
          "}",
          "",
          "// Usage:",
          "const params = { search: 'test', page: 1 };",
          "console.log(toQueryString(params)); // Output: 'search=test&page=1'"
        ],
        "tags": ["javascript", "object", "query string", "url"],
        "author": "axorax"
      },
      {
        "title": "Flatten Nested Object",
        "description": "Flattens a nested object into a single-level object with dot notation for keys.",
        "code": [
          "function flattenObject(obj, prefix = '') {",
          "  return Object.keys(obj).reduce((acc, key) => {",
          "    const fullPath = prefix ? `${prefix}.${key}` : key;",
          "    if (typeof obj[key] === 'object' && obj[key] !== null) {",
          "      Object.assign(acc, flattenObject(obj[key], fullPath));",
          "    } else {",
          "      acc[fullPath] = obj[key];",
          "    }",
          "    return acc;",
          "  }, {});",
          "}",
          "",
          "// Usage:",
          "const nestedObj = { a: { b: { c: 1 }, d: 2 }, e: 3 };",
          "console.log(flattenObject(nestedObj)); // Output: { 'a.b.c': 1, 'a.d': 2, e: 3 }"
        ],
        "tags": ["javascript", "object", "flatten", "utility"],
        "author": "axorax"
      },
      {
        "title": "Pick Keys from Object",
        "description": "Creates a new object with only the specified keys.",
        "code": [
          "function pickKeys(obj, keys) {",
          "  return Object.fromEntries(",
          "    Object.entries(obj).filter(([key]) => keys.includes(key))",
          "  );",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2, c: 3 };",
          "console.log(pickKeys(obj, ['a', 'c'])); // Output: { a: 1, c: 3 }"
        ],
        "tags": ["javascript", "object", "pick", "utility"],
        "author": "axorax"
      },
      {
        "title": "Check if Object is Empty",
        "description": "Checks whether an object has no own enumerable properties.",
        "code": [
          "function isEmptyObject(obj) {",
          "  return Object.keys(obj).length === 0;",
          "}",
          "",
          "// Usage:",
          "console.log(isEmptyObject({})); // Output: true",
          "console.log(isEmptyObject({ a: 1 })); // Output: false"
        ],
        "tags": ["javascript", "object", "check", "empty"],
        "author": "axorax"
      },
      {
        "title": "Invert Object Keys and Values",
        "description": "Creates a new object by swapping keys and values of the given object.",
        "code": [
          "function invertObject(obj) {",
          "  return Object.fromEntries(",
          "    Object.entries(obj).map(([key, value]) => [value, key])",
          "  );",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2, c: 3 };",
          "console.log(invertObject(obj)); // Output: { '1': 'a', '2': 'b', '3': 'c' }"
        ],
        "tags": ["javascript", "object", "invert", "utility"],
        "author": "axorax"
      },
      {
        "title": "Clone Object Shallowly",
        "description": "Creates a shallow copy of an object.",
        "code": [
          "function shallowClone(obj) {",
          "  return { ...obj };",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2 };",
          "const clone = shallowClone(obj);",
          "console.log(clone); // Output: { a: 1, b: 2 }"
        ],
        "tags": ["javascript", "object", "clone", "shallow"],
        "author": "axorax"
      },
      {
        "title": "Count Properties in Object",
        "description": "Counts the number of own properties in an object.",
        "code": [
          "function countProperties(obj) {",
          "  return Object.keys(obj).length;",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2, c: 3 };",
          "console.log(countProperties(obj)); // Output: 3"
        ],
        "tags": ["javascript", "object", "count", "properties"],
        "author": "axorax"
      },
      {
        "title": "Compare Two Objects Shallowly",
        "description": "Compares two objects shallowly and returns whether they are equal.",
        "code": [
          "function shallowEqual(obj1, obj2) {",
          "  const keys1 = Object.keys(obj1);",
          "  const keys2 = Object.keys(obj2);",
          "  if (keys1.length !== keys2.length) return false;",
          "  return keys1.every(key => obj1[key] === obj2[key]);",
          "}",
          "",
          "// Usage:",
          "const obj1 = { a: 1, b: 2 };",
          "const obj2 = { a: 1, b: 2 };",
          "const obj3 = { a: 1, b: 3 };",
          "console.log(shallowEqual(obj1, obj2)); // Output: true",
          "console.log(shallowEqual(obj1, obj3)); // Output: false"
        ],
        "tags": ["javascript", "object", "compare", "shallow"],
        "author": "axorax"
      },
      {
        "title": "Freeze Object",
        "description": "Freezes an object to make it immutable.",
        "code": [
          "function freezeObject(obj) {",
          "  return Object.freeze(obj);",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2 };",
          "const frozenObj = freezeObject(obj);",
          "frozenObj.a = 42;         // This will fail silently in strict mode.",
          "console.log(frozenObj.a); // Output: 1"
        ],
        "tags": ["javascript", "object", "freeze", "immutable"],
        "author": "axorax"
      }
    ]
  },
  {
    "categoryName": "Date and Time",
    "snippets": [
      {
        "title": "Format Date",
        "description": "Formats a date in 'YYYY-MM-DD' format.",
        "code": [
          "const formatDate = (date) => date.toISOString().split('T')[0];",
          "",
          "// Usage:",
          "console.log(formatDate(new Date())); // Output: '2024-12-10'"
        ],
        "tags": ["javascript", "date", "format", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Get Time Difference",
        "description": "Calculates the time difference in days between two dates.",
        "code": [
          "const getTimeDifference = (date1, date2) => {",
          "  const diff = Math.abs(date2 - date1);",
          "  return Math.ceil(diff / (1000 * 60 * 60 * 24));",
          "};",
          "",
          "// Usage:",
          "const date1 = new Date('2024-01-01');",
          "const date2 = new Date('2024-12-31');",
          "console.log(getTimeDifference(date1, date2)); // Output: 365"
        ],
        "tags": ["javascript", "date", "time-difference", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Relative Time Formatter",
        "description": "Displays how long ago a date occurred or how far in the future a date is.",
        "code": [
          "const getRelativeTime = (date) => {",
          "  const now = Date.now();",
          "  const diff = date.getTime() - now;",
          "  const seconds = Math.abs(Math.floor(diff / 1000));",
          "  const minutes = Math.abs(Math.floor(seconds / 60));",
          "  const hours = Math.abs(Math.floor(minutes / 60));",
          "  const days = Math.abs(Math.floor(hours / 24));",
          "  const years = Math.abs(Math.floor(days / 365));",
          "",
          "  if (Math.abs(diff) < 1000) return 'just now';",
          "",
          "  const isFuture = diff > 0;",
          "",
          "  if (years > 0) return `${isFuture ? 'in ' : ''}${years} ${years === 1 ? 'year' : 'years'}${isFuture ? '' : ' ago'}`;",
          "  if (days > 0) return `${isFuture ? 'in ' : ''}${days} ${days === 1 ? 'day' : 'days'}${isFuture ? '' : ' ago'}`;",
          "  if (hours > 0) return `${isFuture ? 'in ' : ''}${hours} ${hours === 1 ? 'hour' : 'hours'}${isFuture ? '' : ' ago'}`;",
          "  if (minutes > 0) return `${isFuture ? 'in ' : ''}${minutes} ${minutes === 1 ? 'minute' : 'minutes'}${isFuture ? '' : ' ago'}`;",
          "",
          "  return `${isFuture ? 'in ' : ''}${seconds} ${seconds === 1 ? 'second' : 'seconds'}${isFuture ? '' : ' ago'}`;",
          "}",
          "",
          "// usage",
          "const pastDate = new Date('2021-12-29 13:00:00');",
          "const futureDate = new Date('2026-12-29 13:00:00');",
          "console.log(getRelativeTime(pastDate)); // x years ago",
          "console.log(getRelativeTime(new Date())); // just now",
          "console.log(getRelativeTime(futureDate)); // in x years"
        ],
        "tags": [
          "javascript",
          "date",
          "time",
          "relative",
          "future",
          "past",
          "utility"
        ],
        "author": "Yugveer06"
      },
      {
        "title": "Get Current Timestamp",
        "description": "Retrieves the current timestamp in milliseconds since January 1, 1970.",
        "code": [
          "const getCurrentTimestamp = () => Date.now();",
          "",
          "// Usage:",
          "console.log(getCurrentTimestamp()); // Output: 1691825935839 (example)"
        ],
        "tags": ["javascript", "date", "timestamp", "utility"],
        "author": "axorax"
      },
      {
        "title": "Check Leap Year",
        "description": "Determines if a given year is a leap year.",
        "code": [
          "const isLeapYear = (year) => (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;",
          "",
          "// Usage:",
          "console.log(isLeapYear(2024)); // Output: true",
          "console.log(isLeapYear(2023)); // Output: false"
        ],
        "tags": ["javascript", "date", "leap-year", "utility"],
        "author": "axorax"
      },
      {
        "title": "Add Days to a Date",
        "description": "Adds a specified number of days to a given date.",
        "code": [
          "const addDays = (date, days) => {",
          "  const result = new Date(date);",
          "  result.setDate(result.getDate() + days);",
          "  return result;",
          "};",
          "",
          "// Usage:",
          "const today = new Date();",
          "console.log(addDays(today, 10)); // Output: Date object 10 days ahead"
        ],
        "tags": ["javascript", "date", "add-days", "utility"],
        "author": "axorax"
      },
      {
        "title": "Start of the Day",
        "description": "Returns the start of the day (midnight) for a given date.",
        "code": [
          "const startOfDay = (date) => new Date(date.setHours(0, 0, 0, 0));",
          "",
          "// Usage:",
          "const today = new Date();",
          "console.log(startOfDay(today)); // Output: Date object for midnight"
        ],
        "tags": ["javascript", "date", "start-of-day", "utility"],
        "author": "axorax"
      },
      {
        "title": "Get Days in Month",
        "description": "Calculates the number of days in a specific month of a given year.",
        "code": [
          "const getDaysInMonth = (year, month) => new Date(year, month + 1, 0).getDate();",
          "",
          "// Usage:",
          "console.log(getDaysInMonth(2024, 1)); // Output: 29 (February in a leap year)",
          "console.log(getDaysInMonth(2023, 1)); // Output: 28"
        ],
        "tags": ["javascript", "date", "days-in-month", "utility"],
        "author": "axorax"
      },
      {
        "title": "Get Day of the Year",
        "description": "Calculates the day of the year (1-365 or 1-366 for leap years) for a given date.",
        "code": [
          "const getDayOfYear = (date) => {",
          "  const startOfYear = new Date(date.getFullYear(), 0, 0);",
          "  const diff = date - startOfYear + (startOfYear.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000;",
          "  return Math.floor(diff / (1000 * 60 * 60 * 24));",
          "};",
          "",
          "// Usage:",
          "const today = new Date('2024-12-31');",
          "console.log(getDayOfYear(today)); // Output: 366 (in a leap year)"
        ],
        "tags": ["javascript", "date", "day-of-year", "utility"],
        "author": "axorax"
      }
    ]
  },
  {
    "categoryName": "Function Utilities",
    "snippets": [
      {
        "title": "Repeat Function Invocation",
        "description": "Invokes a function a specified number of times.",
        "code": [
          "const times = (func, n) => {",
          "  Array.from(Array(n)).forEach(() => {",
          "    func();",
          "  });",
          "};",
          "",
          "// Usage:",
          "const randomFunction = () => console.log('Function called!');",
          "times(randomFunction, 3); // Logs 'Function called!' three times"
        ],
        "tags": ["javascript", "function", "repeat", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Debounce Function",
        "description": "Delays a function execution until after a specified time.",
        "code": [
          "const debounce = (func, delay) => {",
          "  let timeout;",
          "",
          "  return (...args) => {",
          "    clearTimeout(timeout);",
          "    timeout = setTimeout(() => func(...args), delay);",
          "  };",
          "};",
          "",
          "// Usage:",
          "window.addEventListener('resize', debounce(() => console.log('Resized!'), 500));"
        ],
        "tags": ["javascript", "utility", "debounce", "performance"],
        "author": "dostonnabotov"
      },
      {
        "title": "Throttle Function",
        "description": "Limits a function execution to once every specified time interval.",
        "code": [
          "const throttle = (func, limit) => {",
          "  let lastFunc;",
          "  let lastRan;",
          "  return (...args) => {",
          "    const context = this;",
          "    if (!lastRan) {",
          "      func.apply(context, args);",
          "      lastRan = Date.now();",
          "    } else {",
          "      clearTimeout(lastFunc);",
          "      lastFunc = setTimeout(() => {",
          "        if (Date.now() - lastRan >= limit) {",
          "          func.apply(context, args);",
          "          lastRan = Date.now();",
          "        }",
          "      }, limit - (Date.now() - lastRan));",
          "    }",
          "  };",
          "};",
          "",
          "// Usage:",
          "document.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 1000));"
        ],
        "tags": ["javascript", "utility", "throttle", "performance"],
        "author": "dostonnabotov"
      },
      {
        "title": "Get Contrast Color",
        "description": "Returns either black or white text color based on the brightness of the provided hex color.",
        "code": [
          "const getContrastColor = (hexColor) => {",
          "  // Expand short hex color to full format",
          "  if (hexColor.length === 4) {",
          "    hexColor = `#${hexColor[1]}${hexColor[1]}${hexColor[2]}${hexColor[2]}${hexColor[3]}${hexColor[3]}`;",
          "  }",
          "  const r = parseInt(hexColor.slice(1, 3), 16);",
          "  const g = parseInt(hexColor.slice(3, 5), 16);",
          "  const b = parseInt(hexColor.slice(5, 7), 16);",
          "  const brightness = (r * 299 + g * 587 + b * 114) / 1000;",
          "  return brightness >= 128 ? \"#000000\" : \"#FFFFFF\";",
          "};",
          "",
          "// Usage:",
          "console.log(getContrastColor('#fff')); // Output: #000000 (black)",
          "console.log(getContrastColor('#123456')); // Output: #FFFFFF (white)",
          "console.log(getContrastColor('#ff6347')); // Output: #000000 (black)",
          "console.log(getContrastColor('#f4f')); // Output: #000000 (black)"
        ],
        "tags": [
          "javascript",
          "color",
          "hex",
          "contrast",
          "brightness",
          "utility"
        ],
        "author": "yaya12085"
      },
      {
        "title": "Sleep Function",
        "description": "Waits for a specified amount of milliseconds before resolving.",
        "code": [
          "const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));",
          "",
          "// Usage:",
          "async function main() {",
          "  console.log('Hello');",
          "  await sleep(2000); // Waits for 2 seconds",
          "  console.log('World!');",
          "}",
          "",
          "main();"
        ],
        "tags": ["javascript", "sleep", "delay", "utility", "promises"],
        "author": "0xHouss"
      }
    ]
  },
  {
    "categoryName": "DOM Manipulation",
    "snippets": [
      {
        "title": "Toggle Class",
        "description": "Toggles a class on an element.",
        "code": [
          "const toggleClass = (element, className) => {",
          "  element.classList.toggle(className);",
          "};",
          "",
          "// Usage:",
          "const element = document.querySelector('.my-element');",
          "toggleClass(element, 'active');"
        ],
        "tags": ["javascript", "dom", "class", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Smooth Scroll to Element",
        "description": "Scrolls smoothly to a specified element.",
        "code": [
          "const smoothScroll = (element) => {",
          "  element.scrollIntoView({ behavior: 'smooth' });",
          "};",
          "",
          "// Usage:",
          "const target = document.querySelector('#target');",
          "smoothScroll(target);"
        ],
        "tags": ["javascript", "dom", "scroll", "ui"],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "categoryName": "Local Storage",
    "snippets": [
      {
        "title": "Add Item to localStorage",
        "description": "Stores a value in localStorage under the given key.",
        "code": [
          "const addToLocalStorage = (key, value) => {",
          "  localStorage.setItem(key, JSON.stringify(value));",
          "};",
          "",
          "// Usage:",
          "addToLocalStorage('user', { name: 'John', age: 30 });"
        ],
        "tags": ["javascript", "localStorage", "storage", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Retrieve Item from localStorage",
        "description": "Retrieves a value from localStorage by key and parses it.",
        "code": [
          "const getFromLocalStorage = (key) => {",
          "  const item = localStorage.getItem(key);",
          "  return item ? JSON.parse(item) : null;",
          "};",
          "",
          "// Usage:",
          "const user = getFromLocalStorage('user');",
          "console.log(user); // Output: { name: 'John', age: 30 }"
        ],
        "tags": ["javascript", "localStorage", "storage", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Clear All localStorage",
        "description": "Clears all data from localStorage.",
        "code": [
          "const clearLocalStorage = () => {",
          "  localStorage.clear();",
          "};",
          "",
          "// Usage:",
          "clearLocalStorage(); // Removes all items from localStorage"
        ],
        "tags": ["javascript", "localStorage", "storage", "utility"],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "categoryName": "Number Formatting",
    "snippets": [
      {
        "title": "Number Formatter",
        "description": "Formats a number with suffixes (K, M, B, etc.).",
        "code": [
          "const nFormatter = (num) => {",
          "  if (!num) return;",
          "  num = parseFloat(num.toString().replace(/[^0-9.]/g, ''));",
          "  const suffixes = ['', 'K', 'M', 'B', 'T', 'P', 'E'];",
          "  let index = 0;",
          "  while (num >= 1000 && index < suffixes.length - 1) {",
          "    num /= 1000;",
          "    index++;",
          "  }",
          "  return num.toFixed(2).replace(/\\.0+$|(\\.[0-9]*[1-9])0+$/, '$1') + suffixes[index];",
          "};",
          "",
          "// Usage:",
          "console.log(nFormatter(1234567)); // Output: '1.23M'"
        ],
        "tags": ["javascript", "number", "format", "utility"],
        "author": "realvishalrana"
      }
    ]
  }
]
