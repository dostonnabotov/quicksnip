[
  {
    "language": "c",
    "categoryName": "Basics",
    "snippets": [
      {
        "title": "Hello, World!",
        "description": "Prints Hello, World! to the terminal.",
        "code": [
          "#include <stdio.h> // Includes the input/output library",
          "",
          "int main() { // Defines the main function",
          "  printf(\"Hello, World!\\n\") // Outputs Hello, World! and a newline",
          "",
          "  return 0; // indicate the program executed successfully",
          "}"
        ],
        "tags": [
          "c",
          "printing",
          "hello-world",
          "utility"
        ],
        "author": "0xHouss"
      }
    ]
  },
  {
    "language": "c",
    "categoryName": "Mathematical Functions",
    "snippets": [
      {
        "title": "Factorial Function",
        "description": "Calculates the factorial of a number.",
        "code": [
          "int factorial(int x) {",
          "  int y = 1;",
          "",
          "  for (int i = 2; i <= x; i++)",
          "    y *= i;",
          "",
          "  return y;",
          "}"
        ],
        "tags": [
          "c",
          "math",
          "factorial",
          "utility"
        ],
        "author": "0xHouss"
      },
      {
        "title": "Power Function",
        "description": "Calculates the power of a number.",
        "code": [
          "int power(int x, int n) {",
          "  int y = 1;",
          "",
          "  for (int i = 0; i < n; i++)",
          "    y *= x;",
          "",
          "  return y;",
          "}"
        ],
        "tags": [
          "c",
          "math",
          "power",
          "utility"
        ],
        "author": "0xHouss"
      }
    ]
  },
  {
    "language": "cpp",
    "categoryName": "Basics",
    "snippets": [
      {
        "title": "Hello, World!",
        "description": "Prints Hello, World! to the terminal.",
        "code": [
          "#include <iostream> // Includes the input/output stream library",
          "",
          "int main() { // Defines the main function",
          "    std::cout << \"Hello, World!\" << std::endl; // Outputs Hello, World! and a newline",
          "    return 0; // indicate the program executed successfully",
          "}"
        ],
        "tags": [
          "cpp",
          "printing",
          "hello-world",
          "utility"
        ],
        "author": "James-Beans"
      }
    ]
  },
  {
    "language": "cpp",
    "categoryName": "String Manipulation",
    "snippets": [
      {
        "title": "Reverse String",
        "description": "Reverses the characters in a string.",
        "code": [
          "#include <string>",
          "#include <algorithm>",
          "",
          "std::string reverseString(const std::string& input) {",
          "    std::string reversed = input;",
          "    std::reverse(reversed.begin(), reversed.end());",
          "    return reversed;",
          "}"
        ],
        "tags": [
          "cpp",
          "array",
          "reverse",
          "utility"
        ],
        "author": "Vaibhav-kesarwani"
      },
      {
        "title": "Split String",
        "description": "Splits a string by a delimiter",
        "code": [
          "#include <string>",
          "#include <vector>",
          "",
          "std::vector<std::string> split_string(std::string str, std::string delim) {",
          "    std::vector<std::string> splits;",
          "    int i = 0, j;",
          "    int inc = delim.length();",
          "    while (j != std::string::npos) {",
          "        j = str.find(delim, i);",
          "        splits.push_back(str.substr(i, j - i));",
          "        i = j + inc;",
          "    }",
          "    return splits;",
          "}"
        ],
        "tags": [
          "cpp",
          "string",
          "split",
          "utility"
        ],
        "author": "saminjay"
      }
    ]
  },
  {
    "language": "css",
    "categoryName": "Typography",
    "snippets": [
      {
        "title": "Responsive Font Sizing",
        "description": "Adjusts font size based on viewport width.",
        "code": [
          "h1 {",
          "  font-size: calc(1.5rem + 2vw);",
          "}"
        ],
        "tags": [
          "css",
          "font",
          "responsive",
          "typography"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Letter Spacing",
        "description": "Adds space between letters for better readability.",
        "code": [
          "p {",
          "  letter-spacing: 0.05em;",
          "}"
        ],
        "tags": [
          "css",
          "typography",
          "spacing"
        ],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "language": "css",
    "categoryName": "Layouts",
    "snippets": [
      {
        "title": "Grid layout",
        "description": "Equal sized items in a responsive grid",
        "code": [
          ".grid-container {",
          "  display: grid",
          "  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));",
          "/* Explanation:",
          "- `auto-fit`: Automatically fits as many columns as possible within the container.",
          "- `minmax(250px, 1fr)`: Defines a minimum column size of 250px and a maximum size of 1fr (fraction of available space).",
          "*/",
          "}",
          ""
        ],
        "tags": [
          "css",
          "layout",
          "grid"
        ],
        "author": "xshubhamg"
      },
      {
        "title": "Sticky Footer",
        "description": "Ensures the footer always stays at the bottom of the page.",
        "code": [
          "body {",
          "  display: flex;",
          "  flex-direction: column;",
          "  min-height: 100vh;",
          "}",
          "",
          "footer {",
          "  margin-top: auto;",
          "}"
        ],
        "tags": [
          "css",
          "layout",
          "footer",
          "sticky"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Equal-Width Columns",
        "description": "Creates columns with equal widths using flexbox.",
        "code": [
          ".columns {",
          "  display: flex;",
          "  justify-content: space-between;",
          "}",
          "",
          ".column {",
          "  flex: 1;",
          "  margin: 0 10px;",
          "}"
        ],
        "tags": [
          "css",
          "flexbox",
          "columns",
          "layout"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "CSS Reset",
        "description": "Resets some default browser styles, ensuring consistency across browsers.",
        "code": [
          "* {",
          "  margin: 0;",
          "  padding: 0;",
          "  box-sizing: border-box",
          "}"
        ],
        "tags": [
          "css",
          "reset",
          "browser",
          "layout"
        ],
        "author": "AmeerMoustafa"
      },
      {
        "title": "Responsive Design",
        "description": "The different responsive breakpoints.",
        "code": [
          "/* Phone */",
          ".element {",
          "  margin: 0 10%",
          "}",
          "",
          "/* Tablet */",
          "@media (min-width: 640px) {",
          "  .element {",
          "    margin: 0 20%",
          "  }",
          "}",
          "",
          "/* Desktop base */",
          "@media (min-width: 768px) {",
          "  .element {",
          "    margin: 0 30%",
          "  }",
          "}",
          "",
          "/* Desktop large */",
          "@media (min-width: 1024px) {",
          "  .element {",
          "    margin: 0 40%",
          "  }",
          "}",
          "",
          "/* Desktop extra large */",
          "@media (min-width: 1280px) {",
          "  .element {",
          "    margin: 0 60%",
          "  }",
          "}",
          "",
          "/* Desktop bige */",
          "@media (min-width: 1536px) {",
          "  .element {",
          "    margin: 0 80%",
          "  }",
          "}"
        ],
        "tags": [
          "css",
          "responsive"
        ],
        "author": "kruimol"
      }
    ]
  },
  {
    "language": "css",
    "categoryName": "Buttons",
    "snippets": [
      {
        "title": "Button Hover Effect",
        "description": "Creates a hover effect with a color transition.",
        "code": [
          ".button {",
          "  background-color: #007bff;",
          "  color: white;",
          "  padding: 10px 20px;",
          "  border: none;",
          "  border-radius: 5px;",
          "  cursor: pointer;",
          "  transition: background-color 0.3s ease;",
          "}",
          "",
          ".button:hover {",
          "  background-color: #0056b3;",
          "}"
        ],
        "tags": [
          "css",
          "button",
          "hover",
          "transition"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "3D Button Effect",
        "description": "Adds a 3D effect to a button when clicked.",
        "code": [
          ".button {",
          "  background-color: #28a745;",
          "  color: white;",
          "  padding: 10px 20px;",
          "  border: none;",
          "  border-radius: 5px;",
          "  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);",
          "  transition: transform 0.1s;",
          "}",
          "",
          ".button:active {",
          "  transform: translateY(2px);",
          "  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);",
          "}"
        ],
        "tags": [
          "css",
          "button",
          "3D",
          "effect"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "MacOS Button",
        "description": "A macOS-like button style, with hover and shading effects.",
        "code": [
          ".button {",
          " font: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,;",
          " background: #0a85ff;",
          " color: #fff;",
          " padding: 8px 12px;",
          " border: none;",
          " margin: 4px;",
          " border-radius: 10px;",
          " cursor: pointer;",
          " box-shadow: inset 0 1px 1px #fff2, 0px 2px 3px -2px rgba(0, 0, 0, 0.3) !important; /*This is really performance heavy*/",
          " font-size: 14px;",
          " display: flex;",
          " align-items: center;",
          " justify-content: center;",
          " text-decoration: none;",
          " transition: all 150ms cubic-bezier(0.175, 0.885, 0.32, 1.275);",
          "}",
          ".button:hover {",
          " background: #0974ee;",
          " color: #fff",
          "}"
        ],
        "tags": [
          "css",
          "button",
          "macos",
          "hover",
          "transition"
        ],
        "author": "e3nviction"
      }
    ]
  },
  {
    "language": "css",
    "categoryName": "Effects",
    "snippets": [
      {
        "title": "Blur Background",
        "description": "Applies a blur effect to the background of an element.",
        "code": [
          ".blur-background {",
          "  backdrop-filter: blur(10px);",
          "  background: rgba(255, 255, 255, 0.5);",
          "}"
        ],
        "tags": [
          "css",
          "blur",
          "background",
          "effects"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Hover Glow Effect",
        "description": "Adds a glowing effect on hover.",
        "code": [
          ".glow {",
          "  background-color: #f39c12;",
          "  padding: 10px 20px;",
          "  border-radius: 5px;",
          "  transition: box-shadow 0.3s ease;",
          "}",
          "",
          ".glow:hover {",
          "  box-shadow: 0 0 15px rgba(243, 156, 18, 0.8);",
          "}"
        ],
        "tags": [
          "css",
          "hover",
          "glow",
          "effects"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Hover to Reveal Color",
        "description": "A card with an image that transitions from grayscale to full color on hover.",
        "code": [
          ".card {",
          "  height: 300px;",
          "  width: 200px;",
          "  border-radius: 5px;",
          "  overflow: hidden;",
          "}",
          "",
          ".card img{",
          "  height: 100%;",
          "  width: 100%;",
          "  object-fit: cover;",
          "  filter: grayscale(100%);",
          "  transition: all 0.3s;",
          "  transition-duration: 200ms;",
          "  cursor: pointer;",
          "}",
          "",
          ".card:hover img {",
          "  filter: grayscale(0%);",
          "  scale: 1.05;",
          "} "
        ],
        "tags": [
          "css",
          "hover",
          "image",
          "effects"
        ],
        "author": "Haider-Mukhtar"
      }
    ]
  },
  {
    "language": "html",
    "categoryName": "Basic Layouts",
    "snippets": [
      {
        "title": "Sticky Header-Footer Layout",
        "description": "Full-height layout with sticky header and footer, using modern viewport units and flexbox.",
        "code": [
          "<!DOCTYPE html>",
          "<html style=\"margin: 0\">",
          "  <head>",
          "    <style type=\"text/css\">",
          "      body {",
          "        margin: 0;",
          "        display: flex;",
          "        flex-direction: column;",
          "        min-height: 100svh; /* Smallest viewport height */",
          "        min-height: 100vh;  /* Standard viewport height */",
          "        min-height: 100dvh; /* Dynamic viewport height */",
          "        min-height: 100lvh; /* Largest viewport height */",
          "        background-color: red;",
          "      }",
          "",
          "      .header {",
          "        position: sticky;",
          "        top: 0;",
          "        left: 0;",
          "        right: 0;",
          "        background-color: blue;",
          "      }",
          "",
          "      .body {",
          "        flex-grow: 1;",
          "        background-color: whitesmoke;",
          "      }",
          "",
          "      .footer {",
          "        position: sticky;",
          "        bottom: 0;",
          "        left: 0;",
          "        right: 0;",
          "        background-color: blue;",
          "      }",
          "    </style>",
          "  <head>",
          "  <body>",
          "    <div class=\"header\">header</div>",
          "    <div class=\"body\">body/content</div>",
          "    <div class=\"footer\">footer</div>",
          "  </body>",
          "</html>"
        ],
        "tags": [
          "html",
          "css",
          "layout",
          "sticky",
          "flexbox",
          "viewport"
        ],
        "author": "GreenMan36"
      },
      {
        "title": "Grid Layout with Navigation",
        "description": "Full-height grid layout with header navigation using nesting syntax.",
        "code": [
          "<!DOCTYPE html>",
          "<html>",
          "  <head>",
          "    <style>",
          "      body {",
          "        margin: 0;",
          "        min-height: 100vh;",
          "        display: grid;",
          "        grid-template-rows: auto 1fr auto;",
          "        background: red; /* Shouldn't be visible */",
          "      }",
          "",
          "      .header {",
          "        background: #3b82f6;",
          "        padding: 1rem;",
          "        display: flex;",
          "        & .menu {",
          "          margin-left: auto;",
          "        }",
          "        & .menu ul {",
          "          margin-left: auto;",
          "          display: flex;",
          "          gap: 1rem;",
          "        }",
          "      }",
          "",
          "      .main {",
          "        background: #f3f4f6;",
          "        padding: 1rem;",
          "      }",
          "",
          "      .footer {",
          "        background: #1f2937;",
          "        padding: 1rem;",
          "      }",
          "    </style>",
          "  </head>",
          "  <body>",
          "    <div class=\"header\">",
          "      Header",
          "      <nav class=\"menu\">",
          "        <ul>",
          "          <li><a href=\"#\">Home</a></li>",
          "          <li><a href=\"#\">About</a></li>",
          "          <li><a href=\"#\">Contact</a></li>",
          "        </ul>",
          "      </nav>",
          "    </div>",
          "    <div class=\"main\">Main Content</div>",
          "    <div class=\"footer\">Footer</div>",
          "  </body>",
          "</html>"
        ],
        "tags": [
          "html",
          "css",
          "layout",
          "sticky",
          "grid",
          "full-height"
        ],
        "author": "GreenMan36"
      }
    ]
  },
  {
    "language": "javascript",
    "categoryName": "Basics",
    "snippets": [
      {
        "title": "Hello, World!",
        "description": "Prints Hello, World! to the terminal.",
        "code": [
          "console.log(\"Hello, World!\"); // Prints Hello, World! to the console"
        ],
        "tags": [
          "javascript",
          "printing",
          "hello-world",
          "utility"
        ],
        "author": "James-Beans"
      }
    ]
  },
  {
    "language": "javascript",
    "categoryName": "Array Manipulation",
    "snippets": [
      {
        "title": "Remove Duplicates",
        "description": "Removes duplicate values from an array.",
        "code": [
          "const removeDuplicates = (arr) => [...new Set(arr)];",
          "",
          "// Usage:",
          "const numbers = [1, 2, 2, 3, 4, 4, 5];",
          "console.log(removeDuplicates(numbers)); // Output: [1, 2, 3, 4, 5]"
        ],
        "tags": [
          "javascript",
          "array",
          "deduplicate",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Flatten Array",
        "description": "Flattens a multi-dimensional array.",
        "code": [
          "const flattenArray = (arr) => arr.flat(Infinity);",
          "",
          "// Usage:",
          "const nestedArray = [1, [2, [3, [4]]]];",
          "console.log(flattenArray(nestedArray)); // Output: [1, 2, 3, 4]"
        ],
        "tags": [
          "javascript",
          "array",
          "flatten",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Shuffle Array",
        "description": "Shuffles an Array.",
        "code": [
          "function shuffleArray(array) {",
          "    for (let i = array.length - 1; i >= 0; i--) {",
          "        const j = Math.floor(Math.random() * (i + 1));",
          "        [array[i], array[j]] = [array[j], array[i]];",
          "    }",
          "}"
        ],
        "tags": [
          "javascript",
          "array",
          "shuffle",
          "utility"
        ],
        "author": "loxt-nixo"
      },
      {
        "title": "Zip Arrays",
        "description": "Combines two arrays by pairing corresponding elements from each array.",
        "code": [
          "const zip = (arr1, arr2) => arr1.map((value, index) => [value, arr2[index]]);",
          "",
          "// Usage:",
          "const arr1 = ['a', 'b', 'c'];",
          "const arr2 = [1, 2, 3];",
          "console.log(zip(arr1, arr2)); // Output: [['a', 1], ['b', 2], ['c', 3]]"
        ],
        "tags": [
          "javascript",
          "array",
          "utility",
          "map"
        ],
        "author": "Swaraj-Singh-30"
      }
    ]
  },
  {
    "language": "javascript",
    "categoryName": "String Manipulation",
    "snippets": [
      {
        "title": "Slugify String",
        "description": "Converts a string into a URL-friendly slug format.",
        "code": [
          "const slugify = (string, separator = \"-\") => {",
          "  return string",
          "    .toString() // Cast to string (optional)",
          "    .toLowerCase() // Convert the string to lowercase letters",
          "    .trim() // Remove whitespace from both sides of a string (optional)",
          "    .replace(/\\s+/g, separator) // Replace spaces with {separator}",
          "    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars",
          "    .replace(/\\_/g, separator) // Replace _ with {separator}",
          "    .replace(/\\-\\-+/g, separator) // Replace multiple - with single {separator}",
          "    .replace(/\\-$/g, \"\"); // Remove trailing -",
          "};",
          "",
          "// Usage:",
          "const title = \"Hello, World! This is a Test.\";",
          "console.log(slugify(title)); // Output: 'hello-world-this-is-a-test'",
          "console.log(slugify(title, \"_\")); // Output: 'hello_world_this_is_a_test'"
        ],
        "tags": [
          "javascript",
          "string",
          "slug",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Capitalize String",
        "description": "Capitalizes the first letter of a string.",
        "code": [
          "const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);",
          "",
          "// Usage:",
          "console.log(capitalize('hello')); // Output: 'Hello'"
        ],
        "tags": [
          "javascript",
          "string",
          "capitalize",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Reverse String",
        "description": "Reverses the characters in a string.",
        "code": [
          "const reverseString = (str) => str.split('').reverse().join('');",
          "",
          "// Usage:",
          "console.log(reverseString('hello')); // Output: 'olleh'"
        ],
        "tags": [
          "javascript",
          "string",
          "reverse",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Truncate Text",
        "description": "Truncates the text to a maximum length and appends '...' if the text exceeds the maximum length.",
        "code": [
          "const truncateText = (text = '', maxLength = 50) => {",
          "  return `${text.slice(0, maxLength)}${text.length >= maxLength ? '...' : ''}`;",
          "};",
          "",
          "// Usage:",
          "const title = \"Hello, World! This is a Test.\";",
          "console.log(truncateText(title)); // Output: 'Hello, World! This is a Test.'",
          "console.log(truncateText(title, 10)); // Output: 'Hello, Wor...'"
        ],
        "tags": [
          "javascript",
          "string",
          "truncate",
          "utility",
          "text"
        ],
        "author": "realvishalrana"
      },
      {
        "title": "Data with Prefix",
        "description": "Adds a prefix and postfix to data, with a fallback value.",
        "code": [
          "const dataWithPrefix = (data, fallback = '-', prefix = '', postfix = '') => {",
          "  return data ? `${prefix}${data}${postfix}` : fallback;",
          "};",
          "",
          "// Usage:",
          "console.log(dataWithPrefix('123', '-', '(', ')')); // Output: '(123)'",
          "console.log(dataWithPrefix('', '-', '(', ')')); // Output: '-'",
          "console.log(dataWithPrefix('Hello', 'N/A', 'Mr. ', '')); // Output: 'Mr. Hello'",
          "console.log(dataWithPrefix(null, 'N/A', 'Mr. ', '')); // Output: 'N/A'"
        ],
        "tags": [
          "javascript",
          "data",
          "utility"
        ],
        "author": "realvishalrana"
      },
      {
        "title": "Check if String is a Palindrome",
        "description": "Checks whether a given string is a palindrome.",
        "code": [
          "function isPalindrome(str) {",
          "  const cleanStr = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();",
          "  return cleanStr === cleanStr.split('').reverse().join('');",
          "}",
          "",
          "// Example usage:",
          "console.log(isPalindrome('A man, a plan, a canal, Panama')); // Output: true"
        ],
        "tags": [
          "javascript",
          "check",
          "palindrome",
          "string"
        ],
        "author": "axorax"
      },
      {
        "title": "Count Words in a String",
        "description": "Counts the number of words in a string.",
        "code": [
          "function countWords(str) {",
          "  return str.trim().split(/\\s+/).length;",
          "}",
          "",
          "// Example usage:",
          "console.log(countWords('Hello world! This is a test.')); // Output: 6"
        ],
        "tags": [
          "javascript",
          "string",
          "manipulation",
          "word count",
          "count"
        ],
        "author": "axorax"
      },
      {
        "title": "Remove All Whitespace",
        "description": "Removes all whitespace from a string.",
        "code": [
          "function removeWhitespace(str) {",
          "  return str.replace(/\\s+/g, '');",
          "}",
          "",
          "// Example usage:",
          "console.log(removeWhitespace('Hello world!')); // Output: 'Helloworld!'"
        ],
        "tags": [
          "javascript",
          "string",
          "whitespace"
        ],
        "author": "axorax"
      },
      {
        "title": "Pad String on Both Sides",
        "description": "Pads a string on both sides with a specified character until it reaches the desired length.",
        "code": [
          "function padString(str, length, char = ' ') {",
          "  const totalPad = length - str.length;",
          "  const padStart = Math.floor(totalPad / 2);",
          "  const padEnd = totalPad - padStart;",
          "  return char.repeat(padStart) + str + char.repeat(padEnd);",
          "}",
          "",
          "// Example usage:",
          "console.log(padString('hello', 10, '*')); // Output: '**hello***'"
        ],
        "tags": [
          "string",
          "pad",
          "manipulation"
        ],
        "author": "axorax"
      },
      {
        "title": "Convert String to Snake Case",
        "description": "Converts a given string into snake_case.",
        "code": [
          "function toSnakeCase(str) {",
          "  return str.replace(/([a-z])([A-Z])/g, '$1_$2')",
          "            .replace(/\\s+/g, '_')",
          "            .toLowerCase();",
          "}",
          "",
          "// Example usage:",
          "console.log(toSnakeCase('Hello World Test')); // Output: 'hello_world_test'"
        ],
        "tags": [
          "string",
          "case",
          "snake_case"
        ],
        "author": "axorax"
      },
      {
        "title": "Convert String to Camel Case",
        "description": "Converts a given string into camelCase.",
        "code": [
          "function toCamelCase(str) {",
          "  return str.replace(/\\W+(.)/g, (match, chr) => chr.toUpperCase());",
          "}",
          "",
          "// Example usage:",
          "console.log(toCamelCase('hello world test')); // Output: 'helloWorldTest'"
        ],
        "tags": [
          "string",
          "case",
          "camelCase"
        ],
        "author": "aumirza"
      },
      {
        "title": "Convert String to Title Case",
        "description": "Converts a given string into Title Case.",
        "code": [
          "function toTitleCase(str) {",
          "  return str.toLowerCase().replace(/\\b\\w/g, (s) => s.toUpperCase());",
          "}",
          "",
          "// Example usage:",
          "console.log(toTitleCase('hello world test')); // Output: 'Hello World Test'"
        ],
        "tags": [
          "string",
          "case",
          "titleCase"
        ],
        "author": "aumirza"
      },
      {
        "title": "Convert String to Pascal Case",
        "description": "Converts a given string into Pascal Case.",
        "code": [
          "function toPascalCase(str) {",
          "  return str.replace(/\\b\\w/g, (s) => s.toUpperCase()).replace(/\\W+(.)/g, (match, chr) => chr.toUpperCase());",
          "}",
          "",
          "// Example usage:",
          "console.log(toPascalCase('hello world test')); // Output: 'HelloWorldTest'"
        ],
        "tags": [
          "string",
          "case",
          "pascalCase"
        ],
        "author": "aumirza"
      },
      {
        "title": "Convert String to Param Case",
        "description": "Converts a given string into param-case.",
        "code": [
          "function toParamCase(str) {",
          "  return str.toLowerCase().replace(/\\s+/g, '-');",
          "}",
          "",
          "// Example usage:",
          "console.log(toParamCase('Hello World Test')); // Output: 'hello-world-test'"
        ],
        "tags": [
          "string",
          "case",
          "paramCase"
        ],
        "author": "aumirza"
      },
      {
        "title": "Remove Vowels from a String",
        "description": "Removes all vowels from a given string.",
        "code": [
          "function removeVowels(str) {",
          "  return str.replace(/[aeiouAEIOU]/g, '');",
          "}",
          "",
          "// Example usage:",
          "console.log(removeVowels('Hello World')); // Output: 'Hll Wrld'"
        ],
        "tags": [
          "string",
          "remove",
          "vowels"
        ],
        "author": "axorax"
      },
      {
        "title": "Mask Sensitive Information",
        "description": "Masks parts of a sensitive string, like a credit card or email address.",
        "code": [
          "function maskSensitiveInfo(str, visibleCount = 4, maskChar = '*') {",
          "  return str.slice(0, visibleCount) + maskChar.repeat(Math.max(0, str.length - visibleCount));",
          "}",
          "",
          "// Example usage:",
          "console.log(maskSensitiveInfo('123456789', 4)); // Output: '1234*****'",
          "console.log(maskSensitiveInfo('example@mail.com', 2, '#')); // Output: 'ex#############'"
        ],
        "tags": [
          "string",
          "mask",
          "sensitive"
        ],
        "author": "axorax"
      },
      {
        "title": "Extract Initials from Name",
        "description": "Extracts and returns the initials from a full name.",
        "code": [
          "function getInitials(name) {",
          "  return name.split(' ').map(part => part.charAt(0).toUpperCase()).join('');",
          "}",
          "",
          "// Example usage:",
          "console.log(getInitials('John Doe')); // Output: 'JD'"
        ],
        "tags": [
          "string",
          "initials",
          "name"
        ],
        "author": "axorax"
      },
      {
        "title": "Convert Tabs to Spaces",
        "description": "Converts all tab characters in a string to spaces.",
        "code": [
          "function tabsToSpaces(str, spacesPerTab = 4) {",
          "  return str.replace(/\\t/g, ' '.repeat(spacesPerTab));",
          "}",
          "",
          "// Example usage:",
          "console.log(tabsToSpaces('Hello\\tWorld', 2)); // Output: 'Hello  World'"
        ],
        "tags": [
          "string",
          "tabs",
          "spaces"
        ],
        "author": "axorax"
      },
      {
        "title": "Random string",
        "description": "Generates a random string of characters of a certain length",
        "code": [
          "function makeid(length, characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') {",
          "  return Array.from({ length }, () => characters.charAt(Math.floor(Math.random() * characters.length))).join('');",
          "}",
          "",
          "console.log(makeid(5, \"1234\" /* (optional) */));"
        ],
        "tags": [
          "javascript",
          "function",
          "random"
        ],
        "author": "kruimol"
      }
    ]
  },
  {
    "language": "javascript",
    "categoryName": "Object Manipulation",
    "snippets": [
      {
        "title": "Filter Object",
        "description": "Filter out entries in an object where the value is falsy, including empty strings, empty objects, null, and undefined.",
        "code": [
          "export const filterObject = (object = {}) =>",
          "  Object.fromEntries(",
          "    Object.entries(object)",
          "      .filter(([key, value]) => value !== null && value !== undefined && value !== '' && (typeof value !== 'object' || Object.keys(value).length > 0))",
          "  );",
          "",
          "// Usage:",
          "const obj1 = { a: 1, b: null, c: undefined, d: 4, e: '', f: {} };",
          "console.log(filterObject(obj1)); // Output: { a: 1, d: 4 }",
          "",
          "const obj2 = { x: 0, y: false, z: 'Hello', w: [] };",
          "console.log(filterObject(obj2)); // Output: { z: 'Hello' }",
          "",
          "const obj3 = { name: 'John', age: null, address: { city: 'New York' }, phone: '' };",
          "console.log(filterObject(obj3)); // Output: { name: 'John', address: { city: 'New York' } }",
          "",
          "const obj4 = { a: 0, b: '', c: false, d: {}, e: 'Valid' };",
          "console.log(filterObject(obj4)); // Output: { e: 'Valid' }"
        ],
        "tags": [
          "javascript",
          "object",
          "filter",
          "utility"
        ],
        "author": "realvishalrana"
      },
      {
        "title": "Get Nested Value",
        "description": "Retrieves the value at a given path in a nested object.",
        "code": [
          "const getNestedValue = (obj, path) => {",
          "  const keys = path.split('.');",
          "  return keys.reduce((currentObject, key) => {",
          "    return currentObject && typeof currentObject === 'object' ? currentObject[key] : undefined;",
          "  }, obj);",
          "};",
          "",
          "// Usage:",
          "const obj = { a: { b: { c: 42 } } };",
          "console.log(getNestedValue(obj, 'a.b.c')); // Output: 42"
        ],
        "tags": [
          "javascript",
          "object",
          "nested",
          "utility"
        ],
        "author": "realvishalrana"
      },
      {
        "title": "Unique By Key",
        "description": "Filters an array of objects to only include unique objects by a specified key.",
        "code": [
          "const uniqueByKey = (key, arr) =>",
          "  arr.filter((obj, index, self) => index === self.findIndex((t) => t?.[key] === obj?.[key]));",
          "",
          "// Usage:",
          "const arr = [",
          "  { id: 1, name: 'John' },",
          "  { id: 2, name: 'Jane' },",
          "  { id: 1, name: 'John' }",
          "];",
          "console.log(uniqueByKey('id', arr)); // Output: [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }]"
        ],
        "tags": [
          "javascript",
          "array",
          "unique",
          "utility"
        ],
        "author": "realvishalrana"
      },
      {
        "title": "Merge Objects Deeply",
        "description": "Deeply merges two or more objects, including nested properties.",
        "code": [
          "function deepMerge(...objects) {",
          "  return objects.reduce((acc, obj) => {",
          "    Object.keys(obj).forEach(key => {",
          "      if (typeof obj[key] === 'object' && obj[key] !== null) {",
          "        acc[key] = deepMerge(acc[key] || {}, obj[key]);",
          "      } else {",
          "        acc[key] = obj[key];",
          "      }",
          "    });",
          "    return acc;",
          "  }, {});",
          "}",
          "",
          "// Usage:",
          "const obj1 = { a: 1, b: { c: 2 } };",
          "const obj2 = { b: { d: 3 }, e: 4 };",
          "console.log(deepMerge(obj1, obj2)); // Output: { a: 1, b: { c: 2, d: 3 }, e: 4 }"
        ],
        "tags": [
          "javascript",
          "object",
          "merge",
          "deep"
        ],
        "author": "axorax"
      },
      {
        "title": "Omit Keys from Object",
        "description": "Creates a new object with specific keys omitted.",
        "code": [
          "function omitKeys(obj, keys) {",
          "  return Object.fromEntries(",
          "    Object.entries(obj).filter(([key]) => !keys.includes(key))",
          "  );",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2, c: 3 };",
          "console.log(omitKeys(obj, ['b', 'c'])); // Output: { a: 1 }"
        ],
        "tags": [
          "javascript",
          "object",
          "omit",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Convert Object to Query String",
        "description": "Converts an object to a query string for use in URLs.",
        "code": [
          "function toQueryString(obj) {",
          "  return Object.entries(obj)",
          "    .map(([key, value]) => encodeURIComponent(key) + '=' + encodeURIComponent(value))",
          "    .join('&');",
          "}",
          "",
          "// Usage:",
          "const params = { search: 'test', page: 1 };",
          "console.log(toQueryString(params)); // Output: 'search=test&page=1'"
        ],
        "tags": [
          "javascript",
          "object",
          "query string",
          "url"
        ],
        "author": "axorax"
      },
      {
        "title": "Flatten Nested Object",
        "description": "Flattens a nested object into a single-level object with dot notation for keys.",
        "code": [
          "function flattenObject(obj, prefix = '') {",
          "  return Object.keys(obj).reduce((acc, key) => {",
          "    const fullPath = prefix ? `${prefix}.${key}` : key;",
          "    if (typeof obj[key] === 'object' && obj[key] !== null) {",
          "      Object.assign(acc, flattenObject(obj[key], fullPath));",
          "    } else {",
          "      acc[fullPath] = obj[key];",
          "    }",
          "    return acc;",
          "  }, {});",
          "}",
          "",
          "// Usage:",
          "const nestedObj = { a: { b: { c: 1 }, d: 2 }, e: 3 };",
          "console.log(flattenObject(nestedObj)); // Output: { 'a.b.c': 1, 'a.d': 2, e: 3 }"
        ],
        "tags": [
          "javascript",
          "object",
          "flatten",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Pick Keys from Object",
        "description": "Creates a new object with only the specified keys.",
        "code": [
          "function pickKeys(obj, keys) {",
          "  return Object.fromEntries(",
          "    Object.entries(obj).filter(([key]) => keys.includes(key))",
          "  );",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2, c: 3 };",
          "console.log(pickKeys(obj, ['a', 'c'])); // Output: { a: 1, c: 3 }"
        ],
        "tags": [
          "javascript",
          "object",
          "pick",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Check if Object is Empty",
        "description": "Checks whether an object has no own enumerable properties.",
        "code": [
          "function isEmptyObject(obj) {",
          "  return Object.keys(obj).length === 0;",
          "}",
          "",
          "// Usage:",
          "console.log(isEmptyObject({})); // Output: true",
          "console.log(isEmptyObject({ a: 1 })); // Output: false"
        ],
        "tags": [
          "javascript",
          "object",
          "check",
          "empty"
        ],
        "author": "axorax"
      },
      {
        "title": "Invert Object Keys and Values",
        "description": "Creates a new object by swapping keys and values of the given object.",
        "code": [
          "function invertObject(obj) {",
          "  return Object.fromEntries(",
          "    Object.entries(obj).map(([key, value]) => [value, key])",
          "  );",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2, c: 3 };",
          "console.log(invertObject(obj)); // Output: { '1': 'a', '2': 'b', '3': 'c' }"
        ],
        "tags": [
          "javascript",
          "object",
          "invert",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Clone Object Shallowly",
        "description": "Creates a shallow copy of an object.",
        "code": [
          "function shallowClone(obj) {",
          "  return { ...obj };",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2 };",
          "const clone = shallowClone(obj);",
          "console.log(clone); // Output: { a: 1, b: 2 }"
        ],
        "tags": [
          "javascript",
          "object",
          "clone",
          "shallow"
        ],
        "author": "axorax"
      },
      {
        "title": "Count Properties in Object",
        "description": "Counts the number of own properties in an object.",
        "code": [
          "function countProperties(obj) {",
          "  return Object.keys(obj).length;",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2, c: 3 };",
          "console.log(countProperties(obj)); // Output: 3"
        ],
        "tags": [
          "javascript",
          "object",
          "count",
          "properties"
        ],
        "author": "axorax"
      },
      {
        "title": "Compare Two Objects Shallowly",
        "description": "Compares two objects shallowly and returns whether they are equal.",
        "code": [
          "function shallowEqual(obj1, obj2) {",
          "  const keys1 = Object.keys(obj1);",
          "  const keys2 = Object.keys(obj2);",
          "  if (keys1.length !== keys2.length) return false;",
          "  return keys1.every(key => obj1[key] === obj2[key]);",
          "}",
          "",
          "// Usage:",
          "const obj1 = { a: 1, b: 2 };",
          "const obj2 = { a: 1, b: 2 };",
          "const obj3 = { a: 1, b: 3 };",
          "console.log(shallowEqual(obj1, obj2)); // Output: true",
          "console.log(shallowEqual(obj1, obj3)); // Output: false"
        ],
        "tags": [
          "javascript",
          "object",
          "compare",
          "shallow"
        ],
        "author": "axorax"
      },
      {
        "title": "Freeze Object",
        "description": "Freezes an object to make it immutable.",
        "code": [
          "function freezeObject(obj) {",
          "  return Object.freeze(obj);",
          "}",
          "",
          "// Usage:",
          "const obj = { a: 1, b: 2 };",
          "const frozenObj = freezeObject(obj);",
          "frozenObj.a = 42;         // This will fail silently in strict mode.",
          "console.log(frozenObj.a); // Output: 1"
        ],
        "tags": [
          "javascript",
          "object",
          "freeze",
          "immutable"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "javascript",
    "categoryName": "Date and Time",
    "snippets": [
      {
        "title": "Format Date",
        "description": "Formats a date in 'YYYY-MM-DD' format.",
        "code": [
          "const formatDate = (date) => date.toISOString().split('T')[0];",
          "",
          "// Usage:",
          "console.log(formatDate(new Date())); // Output: '2024-12-10'"
        ],
        "tags": [
          "javascript",
          "date",
          "format",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Get Time Difference",
        "description": "Calculates the time difference in days between two dates.",
        "code": [
          "const getTimeDifference = (date1, date2) => {",
          "  const diff = Math.abs(date2 - date1);",
          "  return Math.ceil(diff / (1000 * 60 * 60 * 24));",
          "};",
          "",
          "// Usage:",
          "const date1 = new Date('2024-01-01');",
          "const date2 = new Date('2024-12-31');",
          "console.log(getTimeDifference(date1, date2)); // Output: 365"
        ],
        "tags": [
          "javascript",
          "date",
          "time-difference",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Relative Time Formatter",
        "description": "Displays how long ago a date occurred or how far in the future a date is.",
        "code": [
          "const getRelativeTime = (date) => {",
          "  const now = Date.now();",
          "  const diff = date.getTime() - now;",
          "  const seconds = Math.abs(Math.floor(diff / 1000));",
          "  const minutes = Math.abs(Math.floor(seconds / 60));",
          "  const hours = Math.abs(Math.floor(minutes / 60));",
          "  const days = Math.abs(Math.floor(hours / 24));",
          "  const years = Math.abs(Math.floor(days / 365));",
          "",
          "  if (Math.abs(diff) < 1000) return 'just now';",
          "",
          "  const isFuture = diff > 0;",
          "",
          "  if (years > 0) return `${isFuture ? 'in ' : ''}${years} ${years === 1 ? 'year' : 'years'}${isFuture ? '' : ' ago'}`;",
          "  if (days > 0) return `${isFuture ? 'in ' : ''}${days} ${days === 1 ? 'day' : 'days'}${isFuture ? '' : ' ago'}`;",
          "  if (hours > 0) return `${isFuture ? 'in ' : ''}${hours} ${hours === 1 ? 'hour' : 'hours'}${isFuture ? '' : ' ago'}`;",
          "  if (minutes > 0) return `${isFuture ? 'in ' : ''}${minutes} ${minutes === 1 ? 'minute' : 'minutes'}${isFuture ? '' : ' ago'}`;",
          "",
          "  return `${isFuture ? 'in ' : ''}${seconds} ${seconds === 1 ? 'second' : 'seconds'}${isFuture ? '' : ' ago'}`;",
          "}",
          "",
          "// usage",
          "const pastDate = new Date('2021-12-29 13:00:00');",
          "const futureDate = new Date('2026-12-29 13:00:00');",
          "console.log(getRelativeTime(pastDate)); // x years ago",
          "console.log(getRelativeTime(new Date())); // just now",
          "console.log(getRelativeTime(futureDate)); // in x years"
        ],
        "tags": [
          "javascript",
          "date",
          "time",
          "relative",
          "future",
          "past",
          "utility"
        ],
        "author": "Yugveer06"
      },
      {
        "title": "Get Current Timestamp",
        "description": "Retrieves the current timestamp in milliseconds since January 1, 1970.",
        "code": [
          "const getCurrentTimestamp = () => Date.now();",
          "",
          "// Usage:",
          "console.log(getCurrentTimestamp()); // Output: 1691825935839 (example)"
        ],
        "tags": [
          "javascript",
          "date",
          "timestamp",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Check Leap Year",
        "description": "Determines if a given year is a leap year.",
        "code": [
          "const isLeapYear = (year) => (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;",
          "",
          "// Usage:",
          "console.log(isLeapYear(2024)); // Output: true",
          "console.log(isLeapYear(2023)); // Output: false"
        ],
        "tags": [
          "javascript",
          "date",
          "leap-year",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Add Days to a Date",
        "description": "Adds a specified number of days to a given date.",
        "code": [
          "const addDays = (date, days) => {",
          "  const result = new Date(date);",
          "  result.setDate(result.getDate() + days);",
          "  return result;",
          "};",
          "",
          "// Usage:",
          "const today = new Date();",
          "console.log(addDays(today, 10)); // Output: Date object 10 days ahead"
        ],
        "tags": [
          "javascript",
          "date",
          "add-days",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Start of the Day",
        "description": "Returns the start of the day (midnight) for a given date.",
        "code": [
          "const startOfDay = (date) => new Date(date.setHours(0, 0, 0, 0));",
          "",
          "// Usage:",
          "const today = new Date();",
          "console.log(startOfDay(today)); // Output: Date object for midnight"
        ],
        "tags": [
          "javascript",
          "date",
          "start-of-day",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Get Days in Month",
        "description": "Calculates the number of days in a specific month of a given year.",
        "code": [
          "const getDaysInMonth = (year, month) => new Date(year, month + 1, 0).getDate();",
          "",
          "// Usage:",
          "console.log(getDaysInMonth(2024, 1)); // Output: 29 (February in a leap year)",
          "console.log(getDaysInMonth(2023, 1)); // Output: 28"
        ],
        "tags": [
          "javascript",
          "date",
          "days-in-month",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Get Day of the Year",
        "description": "Calculates the day of the year (1-365 or 1-366 for leap years) for a given date.",
        "code": [
          "const getDayOfYear = (date) => {",
          "  const startOfYear = new Date(date.getFullYear(), 0, 0);",
          "  const diff = date - startOfYear + (startOfYear.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000;",
          "  return Math.floor(diff / (1000 * 60 * 60 * 24));",
          "};",
          "",
          "// Usage:",
          "const today = new Date('2024-12-31');",
          "console.log(getDayOfYear(today)); // Output: 366 (in a leap year)"
        ],
        "tags": [
          "javascript",
          "date",
          "day-of-year",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "javascript",
    "categoryName": "Function Utilities",
    "snippets": [
      {
        "title": "Repeat Function Invocation",
        "description": "Invokes a function a specified number of times.",
        "code": [
          "const times = (func, n) => {",
          "  Array.from(Array(n)).forEach(() => {",
          "    func();",
          "  });",
          "};",
          "",
          "// Usage:",
          "const randomFunction = () => console.log('Function called!');",
          "times(randomFunction, 3); // Logs 'Function called!' three times"
        ],
        "tags": [
          "javascript",
          "function",
          "repeat",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Debounce Function",
        "description": "Delays a function execution until after a specified time.",
        "code": [
          "const debounce = (func, delay) => {",
          "  let timeout;",
          "",
          "  return (...args) => {",
          "    clearTimeout(timeout);",
          "    timeout = setTimeout(() => func(...args), delay);",
          "  };",
          "};",
          "",
          "// Usage:",
          "window.addEventListener('resize', debounce(() => console.log('Resized!'), 500));"
        ],
        "tags": [
          "javascript",
          "utility",
          "debounce",
          "performance"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Throttle Function",
        "description": "Limits a function execution to once every specified time interval.",
        "code": [
          "const throttle = (func, limit) => {",
          "  let lastFunc;",
          "  let lastRan;",
          "  return (...args) => {",
          "    const context = this;",
          "    if (!lastRan) {",
          "      func.apply(context, args);",
          "      lastRan = Date.now();",
          "    } else {",
          "      clearTimeout(lastFunc);",
          "      lastFunc = setTimeout(() => {",
          "        if (Date.now() - lastRan >= limit) {",
          "          func.apply(context, args);",
          "          lastRan = Date.now();",
          "        }",
          "      }, limit - (Date.now() - lastRan));",
          "    }",
          "  };",
          "};",
          "",
          "// Usage:",
          "document.addEventListener('scroll', throttle(() => console.log('Scrolled!'), 1000));"
        ],
        "tags": [
          "javascript",
          "utility",
          "throttle",
          "performance"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Get Contrast Color",
        "description": "Returns either black or white text color based on the brightness of the provided hex color.",
        "code": [
          "const getContrastColor = (hexColor) => {",
          "  // Expand short hex color to full format",
          "  if (hexColor.length === 4) {",
          "    hexColor = `#${hexColor[1]}${hexColor[1]}${hexColor[2]}${hexColor[2]}${hexColor[3]}${hexColor[3]}`;",
          "  }",
          "  const r = parseInt(hexColor.slice(1, 3), 16);",
          "  const g = parseInt(hexColor.slice(3, 5), 16);",
          "  const b = parseInt(hexColor.slice(5, 7), 16);",
          "  const brightness = (r * 299 + g * 587 + b * 114) / 1000;",
          "  return brightness >= 128 ? \"#000000\" : \"#FFFFFF\";",
          "};",
          "",
          "// Usage:",
          "console.log(getContrastColor('#fff')); // Output: #000000 (black)",
          "console.log(getContrastColor('#123456')); // Output: #FFFFFF (white)",
          "console.log(getContrastColor('#ff6347')); // Output: #000000 (black)",
          "console.log(getContrastColor('#f4f')); // Output: #000000 (black)"
        ],
        "tags": [
          "javascript",
          "color",
          "hex",
          "contrast",
          "brightness",
          "utility"
        ],
        "author": "yaya12085"
      },
      {
        "title": "Sleep Function",
        "description": "Waits for a specified amount of milliseconds before resolving.",
        "code": [
          "const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));",
          "",
          "// Usage:",
          "async function main() {",
          "  console.log('Hello');",
          "  await sleep(2000); // Waits for 2 seconds",
          "  console.log('World!');",
          "}",
          "",
          "main();"
        ],
        "tags": [
          "javascript",
          "sleep",
          "delay",
          "utility",
          "promises"
        ],
        "author": "0xHouss"
      },
      {
        "title": "Memoize Function",
        "description": "Caches the result of a function based on its arguments to improve performance.",
        "code": [
          "const memoize = (func) => {",
          "  const cache = new Map();",
          "  return (...args) => {",
          "    const key = JSON.stringify(args);",
          "    if (cache.has(key)) {",
          "      return cache.get(key);",
          "    }",
          "    const result = func(...args);",
          "    cache.set(key, result);",
          "    return result;",
          "  };",
          "};",
          "",
          "// Usage:",
          "const factorial = memoize((n) => (n <= 1 ? 1 : n * factorial(n - 1)));",
          "console.log(factorial(5)); // Output: 120",
          "console.log(factorial(5)); // Output: 120 (retrieved from cache)"
        ],
        "tags": [
          "javascript",
          "memoization",
          "optimization",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Once Function",
        "description": "Ensures a function is only called once.",
        "code": [
          "const once = (func) => {",
          "  let called = false;",
          "  return (...args) => {",
          "    if (!called) {",
          "      called = true;",
          "      return func(...args);",
          "    }",
          "  };",
          "};",
          "",
          "// Usage:",
          "const initialize = once(() => console.log('Initialized!'));",
          "initialize(); // Output: Initialized!",
          "initialize(); // No output"
        ],
        "tags": [
          "javascript",
          "function",
          "once",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Curry Function",
        "description": "Transforms a function into its curried form.",
        "code": [
          "const curry = (func) => {",
          "  const curried = (...args) => {",
          "    if (args.length >= func.length) {",
          "      return func(...args);",
          "    }",
          "    return (...nextArgs) => curried(...args, ...nextArgs);",
          "  };",
          "  return curried;",
          "};",
          "",
          "// Usage:",
          "const add = (a, b, c) => a + b + c;",
          "const curriedAdd = curry(add);",
          "console.log(curriedAdd(1)(2)(3)); // Output: 6",
          "console.log(curriedAdd(1, 2)(3)); // Output: 6"
        ],
        "tags": [
          "javascript",
          "curry",
          "function",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Compose Functions",
        "description": "Composes multiple functions into a single function, where the output of one function becomes the input of the next.",
        "code": [
          "const compose = (...funcs) => (initialValue) => {",
          "  return funcs.reduce((acc, func) => func(acc), initialValue);",
          "};",
          "",
          "// Usage:",
          "const add2 = (x) => x + 2;",
          "const multiply3 = (x) => x * 3;",
          "const composed = compose(multiply3, add2);",
          "console.log(composed(5)); // Output: 21 ((5 + 2) * 3)"
        ],
        "tags": [
          "javascript",
          "function",
          "compose",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Rate Limit Function",
        "description": "Limits how often a function can be executed within a given time window.",
        "code": [
          "const rateLimit = (func, limit, timeWindow) => {",
          "  let queue = [];",
          "  setInterval(() => {",
          "    if (queue.length) {",
          "      const next = queue.shift();",
          "      func(...next.args);",
          "    }",
          "  }, timeWindow);",
          "  return (...args) => {",
          "    if (queue.length < limit) {",
          "      queue.push({ args });",
          "    }",
          "  };",
          "};",
          "",
          "// Usage:",
          "const fetchData = () => console.log('Fetching data...');",
          "const rateLimitedFetch = rateLimit(fetchData, 2, 1000);",
          "setInterval(() => rateLimitedFetch(), 200); // Only calls fetchData twice every second"
        ],
        "tags": [
          "javascript",
          "function",
          "rate-limiting",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "javascript",
    "categoryName": "DOM Manipulation",
    "snippets": [
      {
        "title": "Toggle Class",
        "description": "Toggles a class on an element.",
        "code": [
          "const toggleClass = (element, className) => {",
          "  element.classList.toggle(className);",
          "};",
          "",
          "// Usage:",
          "const element = document.querySelector('.my-element');",
          "toggleClass(element, 'active');"
        ],
        "tags": [
          "javascript",
          "dom",
          "class",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Smooth Scroll to Element",
        "description": "Scrolls smoothly to a specified element.",
        "code": [
          "const smoothScroll = (element) => {",
          "  element.scrollIntoView({ behavior: 'smooth' });",
          "};",
          "",
          "// Usage:",
          "const target = document.querySelector('#target');",
          "smoothScroll(target);"
        ],
        "tags": [
          "javascript",
          "dom",
          "scroll",
          "ui"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Get Element Position",
        "description": "Gets the position of an element relative to the viewport.",
        "code": [
          "const getElementPosition = (element) => {",
          "  const rect = element.getBoundingClientRect();",
          "  return { x: rect.left, y: rect.top };",
          "};",
          "",
          "// Usage:",
          "const element = document.querySelector('.my-element');",
          "const position = getElementPosition(element);",
          "console.log(position); // { x: 100, y: 150 }"
        ],
        "tags": [
          "javascript",
          "dom",
          "position",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Change Element Style",
        "description": "Changes the inline style of an element.",
        "code": [
          "const changeElementStyle = (element, styleObj) => {",
          "  Object.entries(styleObj).forEach(([property, value]) => {",
          "    element.style[property] = value;",
          "  });",
          "};",
          "",
          "// Usage:",
          "const element = document.querySelector('.my-element');",
          "changeElementStyle(element, { color: 'red', backgroundColor: 'yellow' });"
        ],
        "tags": [
          "javascript",
          "dom",
          "style",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Remove Element",
        "description": "Removes a specified element from the DOM.",
        "code": [
          "const removeElement = (element) => {",
          "  if (element && element.parentNode) {",
          "    element.parentNode.removeChild(element);",
          "  }",
          "};",
          "",
          "// Usage:",
          "const element = document.querySelector('.my-element');",
          "removeElement(element);"
        ],
        "tags": [
          "javascript",
          "dom",
          "remove",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "javascript",
    "categoryName": "Local Storage",
    "snippets": [
      {
        "title": "Add Item to localStorage",
        "description": "Stores a value in localStorage under the given key.",
        "code": [
          "const addToLocalStorage = (key, value) => {",
          "  localStorage.setItem(key, JSON.stringify(value));",
          "};",
          "",
          "// Usage:",
          "addToLocalStorage('user', { name: 'John', age: 30 });"
        ],
        "tags": [
          "javascript",
          "localStorage",
          "storage",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Retrieve Item from localStorage",
        "description": "Retrieves a value from localStorage by key and parses it.",
        "code": [
          "const getFromLocalStorage = (key) => {",
          "  const item = localStorage.getItem(key);",
          "  return item ? JSON.parse(item) : null;",
          "};",
          "",
          "// Usage:",
          "const user = getFromLocalStorage('user');",
          "console.log(user); // Output: { name: 'John', age: 30 }"
        ],
        "tags": [
          "javascript",
          "localStorage",
          "storage",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Clear All localStorage",
        "description": "Clears all data from localStorage.",
        "code": [
          "const clearLocalStorage = () => {",
          "  localStorage.clear();",
          "};",
          "",
          "// Usage:",
          "clearLocalStorage(); // Removes all items from localStorage"
        ],
        "tags": [
          "javascript",
          "localStorage",
          "storage",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Check if Item Exists in localStorage",
        "description": "Checks if a specific item exists in localStorage.",
        "code": [
          "const isItemInLocalStorage = (key) => {",
          "  return localStorage.getItem(key) !== null;",
          "};",
          "",
          "// Usage:",
          "console.log(isItemInLocalStorage('user')); // Output: true or false"
        ],
        "tags": [
          "javascript",
          "localStorage",
          "storage",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "javascript",
    "categoryName": "Number Formatting",
    "snippets": [
      {
        "title": "Number Formatter",
        "description": "Formats a number with suffixes (K, M, B, etc.).",
        "code": [
          "const nFormatter = (num) => {",
          "  if (!num) return;",
          "  num = parseFloat(num.toString().replace(/[^0-9.]/g, ''));",
          "  const suffixes = ['', 'K', 'M', 'B', 'T', 'P', 'E'];",
          "  let index = 0;",
          "  while (num >= 1000 && index < suffixes.length - 1) {",
          "    num /= 1000;",
          "    index++;",
          "  }",
          "  return num.toFixed(2).replace(/\\.0+$|(\\.[0-9]*[1-9])0+$/, '$1') + suffixes[index];",
          "};",
          "",
          "// Usage:",
          "console.log(nFormatter(1234567)); // Output: '1.23M'"
        ],
        "tags": [
          "javascript",
          "number",
          "format",
          "utility"
        ],
        "author": "realvishalrana"
      },
      {
        "title": "Format Number with Commas",
        "description": "Formats a number with commas for better readability (e.g., 1000 -> 1,000).",
        "code": [
          "const formatNumberWithCommas = (num) => {",
          "  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');",
          "};",
          "",
          "// Usage:",
          "console.log(formatNumberWithCommas(1000)); // Output: '1,000'",
          "console.log(formatNumberWithCommas(1234567)); // Output: '1,234,567'",
          "console.log(formatNumberWithCommas(987654321)); // Output: '987,654,321'"
        ],
        "tags": [
          "javascript",
          "number",
          "format",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Convert Number to Currency",
        "description": "Converts a number to a currency format with a specific locale.",
        "code": [
          "const convertToCurrency = (num, locale = 'en-US', currency = 'USD') => {",
          "  return new Intl.NumberFormat(locale, {",
          "    style: 'currency',",
          "    currency: currency",
          "  }).format(num);",
          "};",
          "",
          "// Usage:",
          "console.log(convertToCurrency(1234567.89)); // Output: '$1,234,567.89'",
          "console.log(convertToCurrency(987654.32, 'de-DE', 'EUR')); // Output: '987.654,32 €'"
        ],
        "tags": [
          "javascript",
          "number",
          "currency",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Convert Number to Roman Numerals",
        "description": "Converts a number to Roman numeral representation.",
        "code": [
          "const numberToRoman = (num) => {",
          "  const romanNumerals = {",
          "    1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L',",
          "    90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'",
          "  };",
          "  let result = '';",
          "  Object.keys(romanNumerals).reverse().forEach(value => {",
          "    while (num >= value) {",
          "      result += romanNumerals[value];",
          "      num -= value;",
          "    }",
          "  });",
          "  return result;",
          "};",
          "",
          "// Usage:",
          "console.log(numberToRoman(1994)); // Output: 'MCMXCIV'",
          "console.log(numberToRoman(58)); // Output: 'LVIII'"
        ],
        "tags": [
          "javascript",
          "number",
          "roman",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Number to Words Converter",
        "description": "Converts a number to its word representation in English.",
        "code": [
          "const numberToWords = (num) => {",
          "  const below20 = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];",
          "  const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];",
          "  const above1000 = ['Hundred', 'Thousand', 'Million', 'Billion'];",
          "  if (num < 20) return below20[num];",
          "  let words = '';",
          "  for (let i = 0; num > 0; i++) {",
          "    if (i > 0 && num % 1000 !== 0) words = above1000[i] + ' ' + words;",
          "    if (num % 100 >= 20) {",
          "      words = tens[Math.floor(num / 10)] + ' ' + words;",
          "      num %= 10;",
          "    }",
          "    if (num < 20) words = below20[num] + ' ' + words;",
          "    num = Math.floor(num / 100);",
          "  }",
          "  return words.trim();",
          "};",
          "",
          "// Usage:",
          "console.log(numberToWords(123)); // Output: 'One Hundred Twenty Three'",
          "console.log(numberToWords(2045)); // Output: 'Two Thousand Forty Five'"
        ],
        "tags": [
          "javascript",
          "number",
          "words",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Convert to Scientific Notation",
        "description": "Converts a number to scientific notation.",
        "code": [
          "const toScientificNotation = (num) => {",
          "  if (isNaN(num)) {",
          "    throw new Error('Input must be a number');",
          "  }",
          "  if (num === 0) {",
          "    return '0e+0';",
          "  }",
          "  const exponent = Math.floor(Math.log10(Math.abs(num)));",
          "  const mantissa = num / Math.pow(10, exponent);",
          "  return `${mantissa.toFixed(2)}e${exponent >= 0 ? '+' : ''}${exponent}`;",
          "};",
          "",
          "// Usage:",
          "console.log(toScientificNotation(12345)); // Output: '1.23e+4'",
          "console.log(toScientificNotation(0.0005678)); // Output: '5.68e-4'",
          "console.log(toScientificNotation(1000)); // Output: '1.00e+3'",
          "console.log(toScientificNotation(0)); // Output: '0e+0'",
          "console.log(toScientificNotation(-54321)); // Output: '-5.43e+4'"
        ],
        "tags": [
          "javascript",
          "number",
          "scientific",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "javascript",
    "categoryName": "Regular expression",
    "snippets": [
      {
        "title": "Regex Match Utility Function",
        "description": "Enhanced regular expression matching utility.",
        "code": [
          "/**",
          "* @param {string | number} input",
          "*          The input string to match",
          "* @param {regex | string}  expression",
          "*          Regular expression",
          "* @param {string} flags",
          "*          Optional Flags",
          "*",
          "* @returns {array}",
          "* [{",
          "* match: '...',",
          "* matchAtIndex: 0,",
          "* capturedGroups: [ '...', '...' ]",
          "* }]",
          "*/",
          "function regexMatch(input, expression, flags = 'g') {",
          "  let regex =",
          "    expression instanceof RegExp",
          "      ? expression",
          "      : new RegExp(expression, flags);",
          "  let matches = input.matchAll(regex);",
          "  matches = [...matches];",
          "  return matches.map((item) => {",
          "    return {",
          "      match: item[0],",
          "      matchAtIndex: item.index,",
          "      capturedGroups: item.length > 1 ? item.slice(1) : undefined,",
          "    };",
          "  });",
          "}"
        ],
        "tags": [
          "javascript",
          "regex"
        ],
        "author": "aumirza"
      }
    ]
  },
  {
    "language": "python",
    "categoryName": "Basics",
    "snippets": [
      {
        "title": "Hello, World!",
        "description": "Prints Hello, World! to the terminal.",
        "code": [
          "print(\"Hello, World!\") # Prints Hello, World! to the terminal."
        ],
        "tags": [
          "python",
          "printing",
          "hello-world",
          "utility"
        ],
        "author": "James-Beans"
      }
    ]
  },
  {
    "language": "python",
    "categoryName": "String Manipulation",
    "snippets": [
      {
        "title": "Reverse String",
        "description": "Reverses the characters in a string.",
        "code": [
          "def reverse_string(s):",
          "    return s[::-1]",
          "",
          "# Usage:",
          "print(reverse_string('hello'))  # Output: 'olleh'"
        ],
        "tags": [
          "python",
          "string",
          "reverse",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Check Palindrome",
        "description": "Checks if a string is a palindrome.",
        "code": [
          "def is_palindrome(s):",
          "    s = s.lower().replace(' ', '')",
          "    return s == s[::-1]",
          "",
          "# Usage:",
          "print(is_palindrome('A man a plan a canal Panama'))  # Output: True"
        ],
        "tags": [
          "python",
          "string",
          "palindrome",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Count Vowels",
        "description": "Counts the number of vowels in a string.",
        "code": [
          "def count_vowels(s):",
          "    vowels = 'aeiou'",
          "    return len([char for char in s.lower() if char in vowels])",
          "",
          "# Usage:",
          "print(count_vowels('hello'))  # Output: 2"
        ],
        "tags": [
          "python",
          "string",
          "vowels",
          "count",
          "utility"
        ],
        "author": "SteliosGee"
      },
      {
        "title": "Check Anagram",
        "description": "Checks if two strings are anagrams of each other.",
        "code": [
          "def is_anagram(s1, s2):",
          "    return sorted(s1) == sorted(s2)",
          "",
          "# Usage:",
          "print(is_anagram('listen', 'silent'))  # Output: True"
        ],
        "tags": [
          "python",
          "string",
          "anagram",
          "check",
          "utility"
        ],
        "author": "SteliosGee"
      },
      {
        "title": "Remove Punctuation",
        "description": "Removes punctuation from a string.",
        "code": [
          "import string",
          "",
          "def remove_punctuation(s):",
          "    return s.translate(str.maketrans('', '', string.punctuation))",
          "",
          "# Usage:",
          "print(remove_punctuation('Hello, World!'))  # Output: 'Hello World'"
        ],
        "tags": [
          "python",
          "string",
          "punctuation",
          "remove",
          "utility"
        ],
        "author": "SteliosGee"
      },
      {
        "title": "Capitalize Words",
        "description": "Capitalizes the first letter of each word in a string.",
        "code": [
          "def capitalize_words(s):",
          "    return ' '.join(word.capitalize() for word in s.split())",
          "",
          "# Usage:",
          "print(capitalize_words('hello world'))  # Output: 'Hello World'"
        ],
        "tags": [
          "python",
          "string",
          "capitalize",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Find Longest Word",
        "description": "Finds the longest word in a string.",
        "code": [
          "def find_longest_word(s):",
          "    words = s.split()",
          "    return max(words, key=len) if words else ''",
          "",
          "# Usage:",
          "print(find_longest_word('The quick brown fox'))  # Output: 'quick'"
        ],
        "tags": [
          "python",
          "string",
          "longest-word",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Remove Duplicate Characters",
        "description": "Removes duplicate characters from a string while maintaining the order.",
        "code": [
          "def remove_duplicate_chars(s):",
          "    seen = set()",
          "    return ''.join(char for char in s if not (char in seen or seen.add(char)))",
          "",
          "# Usage:",
          "print(remove_duplicate_chars('programming'))  # Output: 'progamin'"
        ],
        "tags": [
          "python",
          "string",
          "duplicates",
          "remove",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Count Words",
        "description": "Counts the number of words in a string.",
        "code": [
          "def count_words(s):",
          "    return len(s.split())",
          "",
          "# Usage:",
          "print(count_words('The quick brown fox'))  # Output: 4"
        ],
        "tags": [
          "python",
          "string",
          "word-count",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Split Camel Case",
        "description": "Splits a camel case string into separate words.",
        "code": [
          "import re",
          "",
          "def split_camel_case(s):",
          "    return ' '.join(re.findall(r'[A-Z][a-z]*|[a-z]+', s))",
          "",
          "# Usage:",
          "print(split_camel_case('camelCaseString'))  # Output: 'camel Case String'"
        ],
        "tags": [
          "python",
          "string",
          "camel-case",
          "split",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Count Character Frequency",
        "description": "Counts the frequency of each character in a string.",
        "code": [
          "from collections import Counter",
          "",
          "def char_frequency(s):",
          "    return dict(Counter(s))",
          "",
          "# Usage:",
          "print(char_frequency('hello'))  # Output: {'h': 1, 'e': 1, 'l': 2, 'o': 1}"
        ],
        "tags": [
          "python",
          "string",
          "character-frequency",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Remove Whitespace",
        "description": "Removes all whitespace from a string.",
        "code": [
          "def remove_whitespace(s):",
          "    return ''.join(s.split())",
          "",
          "# Usage:",
          "print(remove_whitespace('hello world'))  # Output: 'helloworld'"
        ],
        "tags": [
          "python",
          "string",
          "whitespace",
          "remove",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Find All Substrings",
        "description": "Finds all substrings of a given string.",
        "code": [
          "def find_substrings(s):",
          "    substrings = []",
          "    for i in range(len(s)):",
          "        for j in range(i + 1, len(s) + 1):",
          "            substrings.append(s[i:j])",
          "    return substrings",
          "",
          "# Usage:",
          "print(find_substrings('abc'))  # Output: ['a', 'ab', 'abc', 'b', 'bc', 'c']"
        ],
        "tags": [
          "python",
          "string",
          "substring",
          "find",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Convert Snake Case to Camel Case",
        "description": "Converts a snake_case string to camelCase.",
        "code": [
          "def snake_to_camel(s):",
          "    parts = s.split('_')",
          "    return parts[0] + ''.join(word.capitalize() for word in parts[1:])",
          "",
          "# Usage:",
          "print(snake_to_camel('hello_world'))  # Output: 'helloWorld'"
        ],
        "tags": [
          "python",
          "string",
          "snake-case",
          "camel-case",
          "convert",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Remove Specific Characters",
        "description": "Removes specific characters from a string.",
        "code": [
          "def remove_chars(s, chars):",
          "    return ''.join(c for c in s if c not in chars)",
          "",
          "# Usage:",
          "print(remove_chars('hello world', 'eo'))  # Output: 'hll wrld'"
        ],
        "tags": [
          "python",
          "string",
          "remove",
          "characters",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Find Unique Characters",
        "description": "Finds all unique characters in a string.",
        "code": [
          "def find_unique_chars(s):",
          "    return ''.join(sorted(set(s)))",
          "",
          "# Usage:",
          "print(find_unique_chars('banana'))  # Output: 'abn'"
        ],
        "tags": [
          "python",
          "string",
          "unique",
          "characters",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Convert String to ASCII",
        "description": "Converts a string into its ASCII representation.",
        "code": [
          "def string_to_ascii(s):",
          "    return [ord(char) for char in s]",
          "",
          "# Usage:",
          "print(string_to_ascii('hello'))  # Output: [104, 101, 108, 108, 111]"
        ],
        "tags": [
          "python",
          "string",
          "ascii",
          "convert",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Truncate String",
        "description": "Truncates a string to a specified length and adds an ellipsis.",
        "code": [
          "def truncate_string(s, length):",
          "    return s[:length] + '...' if len(s) > length else s",
          "",
          "# Usage:",
          "print(truncate_string('This is a long string', 10))  # Output: 'This is a ...'"
        ],
        "tags": [
          "python",
          "string",
          "truncate",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "python",
    "categoryName": "List Manipulation",
    "snippets": [
      {
        "title": "Flatten Nested List",
        "description": "Flattens a multi-dimensional list into a single list.",
        "code": [
          "def flatten_list(lst):",
          "    return [item for sublist in lst for item in sublist]",
          "",
          "# Usage:",
          "nested_list = [[1, 2], [3, 4], [5]]",
          "print(flatten_list(nested_list))  # Output: [1, 2, 3, 4, 5]"
        ],
        "tags": [
          "python",
          "list",
          "flatten",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Flatten Unevenly Nested Lists",
        "description": "Converts unevenly nested lists of any depth into a single flat list.",
        "code": [
          "def flatten(nested_list):",
          "    \"\"\"",
          "    Flattens unevenly nested lists of any depth into a single flat list.",
          "    \"\"\"",
          "    for item in nested_list:",
          "        if isinstance(item, list):",
          "            yield from flatten(item)",
          "        else:",
          "            yield item",
          "",
          "# Usage:",
          "nested_list = [1, [2, [3, 4]], 5]",
          "flattened = list(flatten(nested_list))",
          "print(flattened)  # Output: [1, 2, 3, 4, 5]"
        ],
        "tags": [
          "python",
          "list",
          "flattening",
          "nested-lists",
          "depth",
          "utilities"
        ],
        "author": "agilarasu"
      },
      {
        "title": "Remove Duplicates",
        "description": "Removes duplicate elements from a list while maintaining order.",
        "code": [
          "def remove_duplicates(lst):",
          "    return list(dict.fromkeys(lst))",
          "",
          "# Usage:",
          "print(remove_duplicates([1, 2, 2, 3, 4, 4, 5]))  # Output: [1, 2, 3, 4, 5]"
        ],
        "tags": [
          "python",
          "list",
          "duplicates",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Find Duplicates in a List",
        "description": "Identifies duplicate elements in a list.",
        "code": [
          "def find_duplicates(lst):",
          "    seen = set()",
          "    duplicates = set()",
          "    for item in lst:",
          "        if item in seen:",
          "            duplicates.add(item)",
          "        else:",
          "            seen.add(item)",
          "    return list(duplicates)",
          "",
          "# Usage:",
          "data = [1, 2, 3, 2, 4, 5, 1]",
          "print(find_duplicates(data))  # Output: [1, 2]"
        ],
        "tags": [
          "python",
          "list",
          "duplicates",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Partition List",
        "description": "Partitions a list into sublists of a given size.",
        "code": [
          "def partition_list(lst, size):",
          "    for i in range(0, len(lst), size):",
          "        yield lst[i:i + size]",
          "",
          "# Usage:",
          "data = [1, 2, 3, 4, 5, 6, 7]",
          "partitions = list(partition_list(data, 3))",
          "print(partitions)  # Output: [[1, 2, 3], [4, 5, 6], [7]]"
        ],
        "tags": [
          "python",
          "list",
          "partition",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Find Intersection of Two Lists",
        "description": "Finds the common elements between two lists.",
        "code": [
          "def list_intersection(lst1, lst2):",
          "    return [item for item in lst1 if item in lst2]",
          "",
          "# Usage:",
          "list_a = [1, 2, 3, 4]",
          "list_b = [3, 4, 5, 6]",
          "print(list_intersection(list_a, list_b))  # Output: [3, 4]"
        ],
        "tags": [
          "python",
          "list",
          "intersection",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Find Maximum Difference in List",
        "description": "Finds the maximum difference between any two elements in a list.",
        "code": [
          "def max_difference(lst):",
          "    if not lst or len(lst) < 2:",
          "        return 0",
          "    return max(lst) - min(lst)",
          "",
          "# Usage:",
          "data = [10, 3, 5, 20, 7]",
          "print(max_difference(data))  # Output: 17"
        ],
        "tags": [
          "python",
          "list",
          "difference",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "python",
    "categoryName": "File Handling",
    "snippets": [
      {
        "title": "Read File Lines",
        "description": "Reads all lines from a file and returns them as a list.",
        "code": [
          "def read_file_lines(filepath):",
          "    with open(filepath, 'r') as file:",
          "        return file.readlines()",
          "",
          "# Usage:",
          "lines = read_file_lines('example.txt')",
          "print(lines)"
        ],
        "tags": [
          "python",
          "file",
          "read",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Write to File",
        "description": "Writes content to a file.",
        "code": [
          "def write_to_file(filepath, content):",
          "    with open(filepath, 'w') as file:",
          "        file.write(content)",
          "",
          "# Usage:",
          "write_to_file('example.txt', 'Hello, World!')"
        ],
        "tags": [
          "python",
          "file",
          "write",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Find Files",
        "description": "Finds all files of the specified type within a given directory.",
        "code": [
          "import os",
          "",
          "def find_files(directory, file_type):",
          "  file_type = file_type.lower()  # Convert file_type to lowercase",
          "  found_files = []",
          "",
          "  for root, _, files in os.walk(directory):",
          "    for file in files:",
          "      file_ext = os.path.splitext(file)[1].lower()",
          "      if file_ext == file_type:",
          "        full_path = os.path.join(root, file)",
          "        found_files.append(full_path)",
          "",
          "  return found_files",
          "",
          "# Example Usage:",
          "pdf_files = find_files('/path/to/your/directory', '.pdf')",
          "print(pdf_files)"
        ],
        "tags": [
          "python",
          "os",
          "filesystem",
          "file_search"
        ],
        "author": "Jackeastern"
      },
      {
        "title": "Append to File",
        "description": "Appends content to the end of a file.",
        "code": [
          "def append_to_file(filepath, content):",
          "    with open(filepath, 'a') as file:",
          "        file.write(content + '\\n')",
          "",
          "# Usage:",
          "append_to_file('example.txt', 'This is an appended line.')"
        ],
        "tags": [
          "python",
          "file",
          "append",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Check if File Exists",
        "description": "Checks if a file exists at the specified path.",
        "code": [
          "import os",
          "",
          "def file_exists(filepath):",
          "    return os.path.isfile(filepath)",
          "",
          "# Usage:",
          "print(file_exists('example.txt'))  # Output: True or False"
        ],
        "tags": [
          "python",
          "file",
          "exists",
          "check",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Delete File",
        "description": "Deletes a file at the specified path.",
        "code": [
          "import os",
          "",
          "def delete_file(filepath):",
          "    if os.path.exists(filepath):",
          "        os.remove(filepath)",
          "        print(f'File {filepath} deleted.')",
          "    else:",
          "        print(f'File {filepath} does not exist.')",
          "",
          "# Usage:",
          "delete_file('example.txt')"
        ],
        "tags": [
          "python",
          "file",
          "delete",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Copy File",
        "description": "Copies a file from source to destination.",
        "code": [
          "import shutil",
          "",
          "def copy_file(src, dest):",
          "    shutil.copy(src, dest)",
          "",
          "# Usage:",
          "copy_file('example.txt', 'copy_of_example.txt')"
        ],
        "tags": [
          "python",
          "file",
          "copy",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "List Files in Directory",
        "description": "Lists all files in a specified directory.",
        "code": [
          "import os",
          "",
          "def list_files(directory):",
          "    return [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]",
          "",
          "# Usage:",
          "files = list_files('/path/to/directory')",
          "print(files)"
        ],
        "tags": [
          "python",
          "file",
          "list",
          "directory",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Get File Extension",
        "description": "Gets the extension of a file.",
        "code": [
          "import os",
          "",
          "def get_file_extension(filepath):",
          "    return os.path.splitext(filepath)[1]",
          "",
          "# Usage:",
          "print(get_file_extension('example.txt'))  # Output: '.txt'"
        ],
        "tags": [
          "python",
          "file",
          "extension",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Read File in Chunks",
        "description": "Reads a file in chunks of a specified size.",
        "code": [
          "def read_file_in_chunks(filepath, chunk_size):",
          "    with open(filepath, 'r') as file:",
          "        while chunk := file.read(chunk_size):",
          "            yield chunk",
          "",
          "# Usage:",
          "for chunk in read_file_in_chunks('example.txt', 1024):",
          "    print(chunk)"
        ],
        "tags": [
          "python",
          "file",
          "read",
          "chunks",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "python",
    "categoryName": "Math and Numbers",
    "snippets": [
      {
        "title": "Find Factorial",
        "description": "Calculates the factorial of a number.",
        "code": [
          "def factorial(n):",
          "    if n == 0:",
          "        return 1",
          "    return n * factorial(n - 1)",
          "",
          "# Usage:",
          "print(factorial(5))  # Output: 120"
        ],
        "tags": [
          "python",
          "math",
          "factorial",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Check Prime Number",
        "description": "Checks if a number is a prime number.",
        "code": [
          "def is_prime(n):",
          "    if n <= 1:",
          "        return False",
          "    for i in range(2, int(n**0.5) + 1):",
          "        if n % i == 0:",
          "            return False",
          "    return True",
          "",
          "# Usage:",
          "print(is_prime(17))  # Output: True"
        ],
        "tags": [
          "python",
          "math",
          "prime",
          "check"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Check Perfect Square",
        "description": "Checks if a number is a perfect square.",
        "code": [
          "def is_perfect_square(n):",
          "    if n < 0:",
          "        return False",
          "    root = int(n**0.5)",
          "    return root * root == n",
          "",
          "# Usage:",
          "print(is_perfect_square(16))  # Output: True",
          "print(is_perfect_square(20))  # Output: False"
        ],
        "tags": [
          "python",
          "math",
          "perfect square",
          "check"
        ],
        "author": "axorax"
      },
      {
        "title": "Convert Binary to Decimal",
        "description": "Converts a binary string to its decimal equivalent.",
        "code": [
          "def binary_to_decimal(binary_str):",
          "    return int(binary_str, 2)",
          "",
          "# Usage:",
          "print(binary_to_decimal('1010'))  # Output: 10",
          "print(binary_to_decimal('1101'))  # Output: 13"
        ],
        "tags": [
          "python",
          "math",
          "binary",
          "decimal",
          "conversion"
        ],
        "author": "axorax"
      },
      {
        "title": "Find LCM (Least Common Multiple)",
        "description": "Calculates the least common multiple (LCM) of two numbers.",
        "code": [
          "def lcm(a, b):",
          "    return abs(a * b) // gcd(a, b)",
          "",
          "# Usage:",
          "print(lcm(12, 15))  # Output: 60",
          "print(lcm(7, 5))    # Output: 35"
        ],
        "tags": [
          "python",
          "math",
          "lcm",
          "gcd",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Solve Quadratic Equation",
        "description": "Solves a quadratic equation ax^2 + bx + c = 0 and returns the roots.",
        "code": [
          "import cmath",
          "",
          "def solve_quadratic(a, b, c):",
          "    discriminant = cmath.sqrt(b**2 - 4 * a * c)",
          "    root1 = (-b + discriminant) / (2 * a)",
          "    root2 = (-b - discriminant) / (2 * a)",
          "    return root1, root2",
          "",
          "# Usage:",
          "print(solve_quadratic(1, -3, 2))  # Output: ((2+0j), (1+0j))",
          "print(solve_quadratic(1, 2, 5))   # Output: ((-1+2j), (-1-2j))"
        ],
        "tags": [
          "python",
          "math",
          "quadratic",
          "equation",
          "solver"
        ],
        "author": "axorax"
      },
      {
        "title": "Calculate Compound Interest",
        "description": "Calculates compound interest for a given principal amount, rate, and time period.",
        "code": [
          "def compound_interest(principal, rate, time, n=1):",
          "    return principal * (1 + rate / n) ** (n * time)",
          "",
          "# Usage:",
          "print(compound_interest(1000, 0.05, 5))   # Output: 1276.2815625000003",
          "print(compound_interest(1000, 0.05, 5, 12)) # Output: 1283.68"
        ],
        "tags": [
          "python",
          "math",
          "compound interest",
          "finance"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "python",
    "categoryName": "Utilities",
    "snippets": [
      {
        "title": "Measure Execution Time",
        "description": "Measures the execution time of a code block.",
        "code": [
          "import time",
          "",
          "def measure_time(func, *args):",
          "    start = time.time()",
          "    result = func(*args)",
          "    end = time.time()",
          "    print(f'Execution time: {end - start:.6f} seconds')",
          "    return result",
          "",
          "# Usage:",
          "def slow_function():",
          "    time.sleep(2)",
          "",
          "measure_time(slow_function)"
        ],
        "tags": [
          "python",
          "time",
          "execution",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Generate Random String",
        "description": "Generates a random alphanumeric string.",
        "code": [
          "import random",
          "import string",
          "",
          "def random_string(length):",
          "    letters_and_digits = string.ascii_letters + string.digits",
          "    return ''.join(random.choice(letters_and_digits) for _ in range(length))",
          "",
          "# Usage:",
          "print(random_string(10))  # Output: Random 10-character string"
        ],
        "tags": [
          "python",
          "random",
          "string",
          "utility"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Convert Bytes to Human-Readable Format",
        "description": "Converts a size in bytes to a human-readable format.",
        "code": [
          "def bytes_to_human_readable(num):",
          "    for unit in ['B', 'KB', 'MB', 'GB', 'TB', 'PB']:",
          "        if num < 1024:",
          "            return f\"{num:.2f} {unit}\"",
          "        num /= 1024",
          "",
          "# Usage:",
          "print(bytes_to_human_readable(123456789))  # Output: '117.74 MB'"
        ],
        "tags": [
          "python",
          "bytes",
          "format",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "python",
    "categoryName": "JSON Manipulation",
    "snippets": [
      {
        "title": "Read JSON File",
        "description": "Reads a JSON file and parses its content.",
        "code": [
          "import json",
          "",
          "def read_json(filepath):",
          "    with open(filepath, 'r') as file:",
          "        return json.load(file)",
          "",
          "# Usage:",
          "data = read_json('data.json')",
          "print(data)"
        ],
        "tags": [
          "python",
          "json",
          "file",
          "read"
        ],
        "author": "e3nviction"
      },
      {
        "title": "Write JSON File",
        "description": "Writes a dictionary to a JSON file.",
        "code": [
          "import json",
          "",
          "def write_json(filepath, data):",
          "    with open(filepath, 'w') as file:",
          "        json.dump(data, file, indent=4)",
          "",
          "# Usage:",
          "data = {'name': 'John', 'age': 30}",
          "write_json('data.json', data)"
        ],
        "tags": [
          "python",
          "json",
          "file",
          "write"
        ],
        "author": "e3nviction"
      },
      {
        "title": "Update JSON File",
        "description": "Updates an existing JSON file with new data or modifies the existing values.",
        "code": [
          "import json",
          "",
          "def update_json(filepath, new_data):",
          "    # Read the existing JSON data",
          "    with open(filepath, 'r') as file:",
          "        data = json.load(file)",
          "",
          "    # Update the data with the new content",
          "    data.update(new_data)",
          "",
          "    # Write the updated data back to the JSON file",
          "    with open(filepath, 'w') as file:",
          "        json.dump(data, file, indent=4)",
          "",
          "# Usage:",
          "new_data = {'age': 31}",
          "update_json('data.json', new_data)"
        ],
        "tags": [
          "python",
          "json",
          "update",
          "file"
        ],
        "author": "axorax"
      },
      {
        "title": "Merge Multiple JSON Files",
        "description": "Merges multiple JSON files into one and writes the merged data into a new file.",
        "code": [
          "import json",
          "",
          "def merge_json_files(filepaths, output_filepath):",
          "    merged_data = []",
          "",
          "    # Read each JSON file and merge their data",
          "    for filepath in filepaths:",
          "        with open(filepath, 'r') as file:",
          "            data = json.load(file)",
          "            merged_data.extend(data)",
          "",
          "    # Write the merged data into a new file",
          "    with open(output_filepath, 'w') as file:",
          "        json.dump(merged_data, file, indent=4)",
          "",
          "# Usage:",
          "files_to_merge = ['file1.json', 'file2.json']",
          "merge_json_files(files_to_merge, 'merged.json')"
        ],
        "tags": [
          "python",
          "json",
          "merge",
          "file"
        ],
        "author": "axorax"
      },
      {
        "title": "Filter JSON Data",
        "description": "Filters a JSON object based on a condition and returns the filtered data.",
        "code": [
          "import json",
          "",
          "def filter_json_data(filepath, condition):",
          "    with open(filepath, 'r') as file:",
          "        data = json.load(file)",
          "",
          "    # Filter data based on the provided condition",
          "    filtered_data = [item for item in data if condition(item)]",
          "",
          "    return filtered_data",
          "",
          "# Usage:",
          "condition = lambda x: x['age'] > 25",
          "filtered = filter_json_data('data.json', condition)",
          "print(filtered)"
        ],
        "tags": [
          "python",
          "json",
          "filter",
          "data"
        ],
        "author": "axorax"
      },
      {
        "title": "Validate JSON Schema",
        "description": "Validates a JSON object against a predefined schema.",
        "code": [
          "import jsonschema",
          "from jsonschema import validate",
          "",
          "def validate_json_schema(data, schema):",
          "    try:",
          "        validate(instance=data, schema=schema)",
          "        return True  # Data is valid",
          "    except jsonschema.exceptions.ValidationError as err:",
          "        return False  # Data is invalid",
          "",
          "# Usage:",
          "schema = {",
          "    'type': 'object',",
          "    'properties': {",
          "        'name': {'type': 'string'},",
          "        'age': {'type': 'integer'}",
          "    },",
          "    'required': ['name', 'age']",
          "}",
          "data = {'name': 'John', 'age': 30}",
          "is_valid = validate_json_schema(data, schema)",
          "print(is_valid)  # Output: True"
        ],
        "tags": [
          "python",
          "json",
          "validation",
          "schema"
        ],
        "author": "axorax"
      },
      {
        "title": "Flatten Nested JSON",
        "description": "Flattens a nested JSON object into a flat dictionary.",
        "code": [
          "def flatten_json(nested_json, prefix=''):",
          "    flat_dict = {}",
          "    for key, value in nested_json.items():",
          "        if isinstance(value, dict):",
          "            flat_dict.update(flatten_json(value, prefix + key + '.'))",
          "        else:",
          "            flat_dict[prefix + key] = value",
          "    return flat_dict",
          "",
          "# Usage:",
          "nested_json = {'name': 'John', 'address': {'city': 'New York', 'zip': '10001'}}",
          "flattened = flatten_json(nested_json)",
          "print(flattened)  # Output: {'name': 'John', 'address.city': 'New York', 'address.zip': '10001'}"
        ],
        "tags": [
          "python",
          "json",
          "flatten",
          "nested"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "python",
    "categoryName": "SQLite Database",
    "snippets": [
      {
        "title": "Create SQLite Database Table",
        "description": "Creates a table in an SQLite database with a dynamic schema.",
        "code": [
          "import sqlite3",
          "",
          "def create_table(db_name, table_name, schema):",
          "    conn = sqlite3.connect(db_name)",
          "    cursor = conn.cursor()",
          "    schema_string = ', '.join([f'{col} {dtype}' for col, dtype in schema.items()])",
          "    cursor.execute(f'''",
          "        CREATE TABLE IF NOT EXISTS {table_name} (",
          "            {schema_string}",
          "        )''')",
          "    conn.commit()",
          "    conn.close()",
          "",
          "# Usage:",
          "db_name = 'example.db'",
          "table_name = 'users'",
          "schema = {",
          "    'id': 'INTEGER PRIMARY KEY',",
          "    'name': 'TEXT',",
          "    'age': 'INTEGER',",
          "    'email': 'TEXT'",
          "}",
          "create_table(db_name, table_name, schema)"
        ],
        "tags": [
          "python",
          "sqlite",
          "database",
          "table"
        ],
        "author": "e3nviction"
      },
      {
        "title": "Insert Data into Sqlite Table",
        "description": "Inserts a row into a specified SQLite table using a dictionary of fields and values.",
        "code": [
          "import sqlite3",
          "",
          "def insert_into_table(db_path, table_name, data):",
          "    with sqlite3.connect(db_path) as conn:",
          "        columns = ', '.join(data.keys())",
          "        placeholders = ', '.join(['?'] * len(data))",
          "        sql = f\"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})\"",
          "        conn.execute(sql, tuple(data.values()))",
          "        conn.commit()",
          "",
          "# Usage:",
          "db_path = 'example.db'",
          "table_name = 'users'",
          "data = {",
          "    'name': 'John Doe',",
          "    'email': 'john@example.com',",
          "    'age': 30",
          "}",
          "insert_into_table(db_path, table_name, data)"
        ],
        "tags": [
          "python",
          "sqlite",
          "database",
          "utility"
        ],
        "author": "e3nviction"
      }
    ]
  },
  {
    "language": "python",
    "categoryName": "Error Handling",
    "snippets": [
      {
        "title": "Safe Division",
        "description": "Performs division with error handling.",
        "code": [
          "def safe_divide(a, b):",
          "    try:",
          "        return a / b",
          "    except ZeroDivisionError:",
          "        return 'Cannot divide by zero!'",
          "",
          "# Usage:",
          "print(safe_divide(10, 2))  # Output: 5.0",
          "print(safe_divide(10, 0))  # Output: 'Cannot divide by zero!'"
        ],
        "tags": [
          "python",
          "error-handling",
          "division",
          "utility"
        ],
        "author": "e3nviction"
      },
      {
        "title": "Retry Function Execution on Exception",
        "description": "Retries a function execution a specified number of times if it raises an exception.",
        "code": [
          "import time",
          "",
          "def retry(func, retries=3, delay=1):",
          "    for attempt in range(retries):",
          "        try:",
          "            return func()",
          "        except Exception as e:",
          "            print(f\"Attempt {attempt + 1} failed: {e}\")",
          "            time.sleep(delay)",
          "    raise Exception(\"All retry attempts failed\")",
          "",
          "# Usage:",
          "def unstable_function():",
          "    raise ValueError(\"Simulated failure\")",
          "",
          "# Retry 3 times with 2 seconds delay:",
          "try:",
          "    retry(unstable_function, retries=3, delay=2)",
          "except Exception as e:",
          "    print(e)  # Output: All retry attempts failed"
        ],
        "tags": [
          "python",
          "error-handling",
          "retry",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Validate Input with Exception Handling",
        "description": "Validates user input and handles invalid input gracefully.",
        "code": [
          "def validate_positive_integer(input_value):",
          "    try:",
          "        value = int(input_value)",
          "        if value < 0:",
          "            raise ValueError(\"The number must be positive\")",
          "        return value",
          "    except ValueError as e:",
          "        return f\"Invalid input: {e}\"",
          "",
          "# Usage:",
          "print(validate_positive_integer('10'))  # Output: 10",
          "print(validate_positive_integer('-5'))  # Output: Invalid input: The number must be positive",
          "print(validate_positive_integer('abc'))  # Output: Invalid input: invalid literal for int() with base 10: 'abc'"
        ],
        "tags": [
          "python",
          "error-handling",
          "validation",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Handle File Not Found Error",
        "description": "Attempts to open a file and handles the case where the file does not exist.",
        "code": [
          "def read_file_safe(filepath):",
          "    try:",
          "        with open(filepath, 'r') as file:",
          "            return file.read()",
          "    except FileNotFoundError:",
          "        return \"File not found!\"",
          "",
          "# Usage:",
          "print(read_file_safe('nonexistent.txt'))  # Output: 'File not found!'"
        ],
        "tags": [
          "python",
          "error-handling",
          "file",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "python",
    "categoryName": "Datetime Utilities",
    "snippets": [
      {
        "title": "Get Current Date and Time String",
        "description": "Fetches the current date and time as a formatted string.",
        "code": [
          "from datetime import datetime",
          "",
          "def get_current_datetime_string():",
          "    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')",
          "",
          "# Usage:",
          "print(get_current_datetime_string())  # Output: '2023-01-01 12:00:00'"
        ],
        "tags": [
          "python",
          "datetime",
          "utility"
        ],
        "author": "e3nviction"
      },
      {
        "title": "Calculate Date Difference in Milliseconds",
        "description": "Calculates the difference between two dates in milliseconds.",
        "code": [
          "from datetime import datetime",
          "",
          "def date_difference_in_millis(date1, date2):",
          "    delta = date2 - date1",
          "    return delta.total_seconds() * 1000",
          "",
          "# Usage:",
          "d1 = datetime(2023, 1, 1, 12, 0, 0)",
          "d2 = datetime(2023, 1, 1, 12, 1, 0)",
          "print(date_difference_in_millis(d1, d2))"
        ],
        "tags": [
          "python",
          "datetime",
          "utility"
        ],
        "author": "e3nviction"
      },
      {
        "title": "Generate Date Range List",
        "description": "Generates a list of dates between two given dates.",
        "code": [
          "from datetime import datetime, timedelta",
          "",
          "def generate_date_range(start_date, end_date):",
          "    if start_date > end_date:",
          "        raise ValueError(\"start_date must be before end_date\")",
          "",
          "    current_date = start_date",
          "    date_list = []",
          "    while current_date <= end_date:",
          "        date_list.append(current_date)",
          "        current_date += timedelta(days=1)",
          "",
          "    return date_list",
          "",
          "# Usage:",
          "start = datetime(2023, 1, 1)",
          "end = datetime(2023, 1, 5)",
          "dates = generate_date_range(start, end)",
          "for d in dates:",
          "    print(d.strftime('%Y-%m-%d'))",
          "# Output: '2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05'"
        ],
        "tags": [
          "python",
          "datetime",
          "range",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Determine Day of the Week",
        "description": "Calculates the day of the week for a given date.",
        "code": [
          "from datetime import datetime",
          "",
          "def get_day_of_week(date):",
          "    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']",
          "    try:",
          "        return days[date.weekday()]",
          "    except IndexError:",
          "        raise ValueError(\"Invalid date\")",
          "",
          "# Usage:",
          "date = datetime(2023, 1, 1)",
          "day = get_day_of_week(date)",
          "print(day)  # Output: 'Sunday'"
        ],
        "tags": [
          "python",
          "datetime",
          "weekday",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Check if Date is a Weekend",
        "description": "Checks whether a given date falls on a weekend.",
        "code": [
          "from datetime import datetime",
          "",
          "def is_weekend(date):",
          "    try:",
          "        return date.weekday() >= 5  # Saturday = 5, Sunday = 6",
          "    except AttributeError:",
          "        raise TypeError(\"Input must be a datetime object\")",
          "",
          "# Usage:",
          "date = datetime(2023, 1, 1)",
          "weekend = is_weekend(date)",
          "print(weekend)  # Output: True (Sunday)"
        ],
        "tags": [
          "python",
          "datetime",
          "weekend",
          "utility"
        ],
        "author": "axorax"
      },
      {
        "title": "Get Number of Days in a Month",
        "description": "Determines the number of days in a specific month and year.",
        "code": [
          "from calendar import monthrange",
          "from datetime import datetime",
          "",
          "def get_days_in_month(year, month):",
          "    try:",
          "        return monthrange(year, month)[1]",
          "    except ValueError as e:",
          "        raise ValueError(f\"Invalid month or year: {e}\")",
          "",
          "# Usage:",
          "days = get_days_in_month(2023, 2)",
          "print(days)  # Output: 28 (for non-leap year February)"
        ],
        "tags": [
          "python",
          "datetime",
          "calendar",
          "utility"
        ],
        "author": "axorax"
      }
    ]
  },
  {
    "language": "rust",
    "categoryName": "Basics",
    "snippets": [
      {
        "title": "Hello, World!",
        "description": "Prints Hello, World! to the terminal.",
        "code": [
          "fn main() { // Defines the main running function",
          "    println!(\"Hello, World!\"); // Prints Hello, World! to the terminal.",
          "}"
        ],
        "tags": [
          "rust",
          "printing",
          "hello-world",
          "utility"
        ],
        "author": "James-Beans"
      }
    ]
  },
  {
    "language": "rust",
    "categoryName": "String Manipulation",
    "snippets": [
      {
        "title": "Capitalize String",
        "description": "Makes the first letter of a string uppercase.",
        "code": [
          "fn capitalized(str: &str) -> String {",
          "    let mut chars = str.chars();",
          "    match chars.next() {",
          "        None => String::new(),",
          "        Some(f) => f.to_uppercase().chain(chars).collect(),",
          "    }",
          "}",
          "",
          "// Usage:",
          "assert_eq!(capitalized(\"lower_case\"), \"Lower_case\")"
        ],
        "tags": [
          "rust",
          "string",
          "capitalize",
          "utility"
        ],
        "author": "Mathys-Gasnier"
      }
    ]
  },
  {
    "language": "rust",
    "categoryName": "File Handling",
    "snippets": [
      {
        "title": "Read File Lines",
        "description": "Reads all lines from a file and returns them as a vector of strings.",
        "code": [
          "fn read_lines(file_name: &str) -> std::io::Result<Vec<String>>",
          "    Ok(",
          "        std::fs::read_to_string(file_name)?",
          "            .lines()",
          "            .map(String::from)",
          "            .collect()",
          "    )",
          "}",
          "",
          "// Usage:",
          "let lines = read_lines(\"path/to/file.txt\").expect(\"Failed to read lines from file\")"
        ],
        "tags": [
          "rust",
          "file",
          "read",
          "utility"
        ],
        "author": "Mathys-Gasnier"
      },
      {
        "title": "Find Files",
        "description": "Finds all files of the specified extension within a given directory.",
        "code": [
          "fn find_files(directory: &str, file_type: &str) -> std::io::Result<Vec<std::path::PathBuf>> {",
          "    let mut result = vec![];",
          "",
          "    for entry in std::fs::read_dir(directory)? {",
          "        let dir = entry?;",
          "        let path = dir.path();",
          "        if dir.file_type().is_ok_and(|t| !t.is_file()) &&",
          "            path.extension().is_some_and(|ext| ext != file_type) {",
          "            continue;",
          "        }",
          "        result.push(path)",
          "    }",
          "",
          "    Ok(result)",
          "}",
          "",
          "// Usage:",
          "let files = find_files(\"/path/to/your/directory\", \".pdf\")"
        ],
        "tags": [
          "rust",
          "file",
          "search"
        ],
        "author": "Mathys-Gasnier"
      }
    ]
  },
  {
    "language": "scss",
    "categoryName": "Typography",
    "snippets": [
      {
        "title": "Line Clamp Mixin",
        "description": "A Sass mixin to clamp text to a specific number of lines.",
        "code": [
          "@mixin line-clamp($number) {",
          "  display: -webkit-box;",
          "  -webkit-box-orient: vertical;",
          "  -webkit-line-clamp: $number;",
          "  overflow: hidden;",
          "}"
        ],
        "tags": [
          "sass",
          "mixin",
          "typography",
          "css"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Text Overflow Ellipsis",
        "description": "Ensures long text is truncated with an ellipsis.",
        "code": [
          "@mixin text-ellipsis {",
          "  overflow: hidden;",
          "  white-space: nowrap;",
          "  text-overflow: ellipsis;",
          "}"
        ],
        "tags": [
          "sass",
          "mixin",
          "text",
          "css"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Font Import Helper",
        "description": "Simplifies importing custom fonts in Sass.",
        "code": [
          "@mixin import-font($family, $weight: 400, $style: normal) {",
          "  @font-face {",
          "    font-family: #{$family};",
          "    font-weight: #{$weight};",
          "    font-style: #{$style};",
          "    src: url('/fonts/#{$family}-#{$weight}.woff2') format('woff2'),",
          "         url('/fonts/#{$family}-#{$weight}.woff') format('woff');",
          "  }",
          "}"
        ],
        "tags": [
          "sass",
          "mixin",
          "fonts",
          "css"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Text Gradient",
        "description": "Adds a gradient color effect to text.",
        "code": [
          "@mixin text-gradient($from, $to) {",
          "  background: linear-gradient(to right, $from, $to);",
          "  -webkit-background-clip: text;",
          "  -webkit-text-fill-color: transparent;",
          "}"
        ],
        "tags": [
          "sass",
          "mixin",
          "gradient",
          "text",
          "css"
        ],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "language": "scss",
    "categoryName": "Layouts",
    "snippets": [
      {
        "title": "Grid Container",
        "description": "Creates a responsive grid container with customizable column counts.",
        "code": [
          "@mixin grid-container($columns: 12, $gap: 1rem) {",
          "  display: grid;",
          "  grid-template-columns: repeat($columns, 1fr);",
          "  gap: $gap;",
          "}"
        ],
        "tags": [
          "scss",
          "grid",
          "layout",
          "css"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Flex Center",
        "description": "A mixin to center content using flexbox.",
        "code": [
          "@mixin flex-center {",
          "  display: flex;",
          "  justify-content: center;",
          "  align-items: center;",
          "}"
        ],
        "tags": [
          "scss",
          "flex",
          "center",
          "css"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Aspect Ratio",
        "description": "Ensures that elements maintain a specific aspect ratio.",
        "code": [
          "@mixin aspect-ratio($width, $height) {",
          "  position: relative;",
          "  width: 100%;",
          "  padding-top: ($height / $width) * 100%;",
          "  > * {",
          "    position: absolute;",
          "    top: 0;",
          "    left: 0;",
          "    width: 100%;",
          "    height: 100%;",
          "  }",
          "}"
        ],
        "tags": [
          "scss",
          "aspect-ratio",
          "layout",
          "css"
        ],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "language": "scss",
    "categoryName": "Animations",
    "snippets": [
      {
        "title": "Fade In Animation",
        "description": "Animates the fade-in effect.",
        "code": [
          "@keyframes fade-in {",
          "  from {",
          "    opacity: 0;",
          "  }",
          "  to {",
          "    opacity: 1;",
          "  }",
          "}",
          "",
          "@mixin fade-in($duration: 1s, $easing: ease-in-out) {",
          "  animation: fade-in $duration $easing;",
          "}"
        ],
        "tags": [
          "scss",
          "animation",
          "fade",
          "css"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Slide In From Left",
        "description": "Animates content sliding in from the left.",
        "code": [
          "@keyframes slide-in-left {",
          "  from {",
          "    transform: translateX(-100%);",
          "  }",
          "  to {",
          "    transform: translateX(0);",
          "  }",
          "}",
          "",
          "@mixin slide-in-left($duration: 0.5s, $easing: ease-out) {",
          "  animation: slide-in-left $duration $easing;",
          "}"
        ],
        "tags": [
          "scss",
          "animation",
          "slide",
          "css"
        ],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "language": "scss",
    "categoryName": "Utilities",
    "snippets": [
      {
        "title": "Responsive Breakpoints",
        "description": "Generates media queries for responsive design.",
        "code": [
          "@mixin breakpoint($breakpoint) {",
          "  @if $breakpoint == sm {",
          "    @media (max-width: 576px) { @content; }",
          "  } @else if $breakpoint == md {",
          "    @media (max-width: 768px) { @content; }",
          "  } @else if $breakpoint == lg {",
          "    @media (max-width: 992px) { @content; }",
          "  } @else if $breakpoint == xl {",
          "    @media (max-width: 1200px) { @content; }",
          "  }",
          "}"
        ],
        "tags": [
          "scss",
          "responsive",
          "media-queries",
          "css"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Clearfix",
        "description": "Provides a clearfix utility for floating elements.",
        "code": [
          "@mixin clearfix {",
          "  &::after {",
          "    content: '';",
          "    display: block;",
          "    clear: both;",
          "  }",
          "}"
        ],
        "tags": [
          "scss",
          "clearfix",
          "utility",
          "css"
        ],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "language": "scss",
    "categoryName": "Borders & Shadows",
    "snippets": [
      {
        "title": "Border Radius Helper",
        "description": "Applies a customizable border-radius.",
        "code": [
          "@mixin border-radius($radius: 4px) {",
          "  border-radius: $radius;",
          "}"
        ],
        "tags": [
          "scss",
          "border",
          "radius",
          "css"
        ],
        "author": "dostonnabotov"
      },
      {
        "title": "Box Shadow Helper",
        "description": "Generates a box shadow with customizable values.",
        "code": [
          "@mixin box-shadow($x: 0px, $y: 4px, $blur: 10px, $spread: 0px, $color: rgba(0, 0, 0, 0.1)) {",
          "  box-shadow: $x $y $blur $spread $color;",
          "}"
        ],
        "tags": [
          "scss",
          "box-shadow",
          "css",
          "effects"
        ],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "language": "scss",
    "categoryName": "Components",
    "snippets": [
      {
        "title": "Primary Button",
        "description": "Generates a styled primary button.",
        "code": [
          "@mixin primary-button($bg: #007bff, $color: #fff) {",
          "  background-color: $bg;",
          "  color: $color;",
          "  padding: 0.5rem 1rem;",
          "  border: none;",
          "  border-radius: 4px;",
          "  cursor: pointer;",
          "",
          "  &:hover {",
          "    background-color: darken($bg, 10%);",
          "  }",
          "}"
        ],
        "tags": [
          "scss",
          "button",
          "primary",
          "css"
        ],
        "author": "dostonnabotov"
      }
    ]
  }
]