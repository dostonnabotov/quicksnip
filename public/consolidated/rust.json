[
    {
        "name": "Basics",
        "snippets": [
            {
                "title": "Hello, World!",
                "description": "Prints Hello, World! to the terminal.",
                "author": "James-Beans",
                "tags": [
                    "printing",
                    "hello-world"
                ],
                "contributors": [],
                "code": "fn main() { // Defines the main running function\n    println!(\"Hello, World!\"); // Prints Hello, World! to the terminal.\n}\n"
            }
        ]
    },
    {
        "name": "File Handling",
        "snippets": [
            {
                "title": "Find Files",
                "description": "Finds all files of the specified extension within a given directory.",
                "author": "Mathys-Gasnier",
                "tags": [
                    "file",
                    "search"
                ],
                "contributors": [],
                "code": "fn find_files(directory: &str, file_type: &str) -> std::io::Result<Vec<std::path::PathBuf>> {\n    let mut result = vec![];\n\n    for entry in std::fs::read_dir(directory)? {\n        let dir = entry?;\n        let path = dir.path();\n        if dir.file_type().is_ok_and(|t| !t.is_file()) &&\n            path.extension().is_some_and(|ext| ext != file_type) {\n            continue;\n        }\n        result.push(path)\n    }\n\n    Ok(result)\n}\n\n// Usage:\nfind_files(\"/path/to/your/directory\", \".pdf\"); // Returns: if Ok(), a vector of path to `.pdf` files in the directory\n"
            },
            {
                "title": "Read File Lines",
                "description": "Reads all lines from a file and returns them as a vector of strings.",
                "author": "Mathys-Gasnier",
                "tags": [
                    "file",
                    "read"
                ],
                "contributors": [],
                "code": "fn read_lines(file_name: &str) -> std::io::Result<Vec<String>>\n    Ok(\n        std::fs::read_to_string(file_name)?\n            .lines()\n            .map(String::from)\n            .collect()\n    )\n}\n\n// Usage:\nread_lines(\"path/to/file.txt\"); // Returns: If Ok(), a Vec of the lines of the file\n"
            }
        ]
    },
    {
        "name": "String Manipulation",
        "snippets": [
            {
                "title": "Capitalize String",
                "description": "Makes the first letter of a string uppercase.",
                "author": "Mathys-Gasnier",
                "tags": [
                    "string",
                    "capitalize"
                ],
                "contributors": [],
                "code": "fn capitalized(str: &str) -> String {\n    let mut chars = str.chars();\n    match chars.next() {\n        None => String::new(),\n        Some(f) => f.to_uppercase().chain(chars).collect(),\n    }\n}\n\n// Usage:\ncapitalized(\"lower_case\"); // Returns: Lower_case\n"
            }
        ]
    }
]