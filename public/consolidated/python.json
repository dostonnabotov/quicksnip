[
    {
        "name": "Basics",
        "snippets": [
            {
                "title": "Hello, World!",
                "description": "Prints Hello, World! to the terminal.",
                "author": "James-Beans",
                "tags": [
                    "printing",
                    "hello-world"
                ],
                "contributors": [],
                "code": "print(\"Hello, World!\") # Prints Hello, World! to the terminal.\n"
            }
        ]
    },
    {
        "name": "Datetime Utilities",
        "snippets": [
            {
                "title": "Calculate Date Difference in Milliseconds",
                "description": "Calculates the difference between two dates in milliseconds.",
                "author": "e3nviction",
                "tags": [
                    "datetime",
                    "difference"
                ],
                "contributors": [],
                "code": "from datetime import datetime\n\ndef date_difference_in_millis(date1, date2):\n    delta = date2 - date1\n    return delta.total_seconds() * 1000\n\n# Usage:\nd1 = datetime(2023, 1, 1, 12, 0, 0)\nd2 = datetime(2023, 1, 1, 12, 1, 0)\ndate_difference_in_millis(d1, d2) # Returns: 60000\n"
            },
            {
                "title": "Check if Date is a Weekend",
                "description": "Checks whether a given date falls on a weekend.",
                "author": "axorax",
                "tags": [
                    "datetime",
                    "weekend"
                ],
                "contributors": [],
                "code": "from datetime import datetime\n\ndef is_weekend(date):\n    try:\n        return date.weekday() >= 5  # Saturday = 5, Sunday = 6\n    except AttributeError:\n        raise TypeError(\"Input must be a datetime object\")\n\n# Usage:\ndate = datetime(2023, 1, 1)\nis_weekend(date) # Returns: True (Sunday)\n"
            },
            {
                "title": "Day of the Week String",
                "description": "Gets the string of the day of the week for a given date.",
                "author": "axorax",
                "tags": [
                    "datetime",
                    "weekday"
                ],
                "contributors": [],
                "code": "from datetime import datetime\n\ndef get_day_of_week(date):\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    try:\n        return days[date.weekday()]\n    except IndexError:\n        raise ValueError(\"Invalid date\")\n\n# Usage:\ndate = datetime(2023, 1, 1)\nget_day_of_week(date) # Returns: 'Sunday'\n"
            },
            {
                "title": "Generate Date Range List",
                "description": "Generates a list of dates between two given dates.",
                "author": "axorax",
                "tags": [
                    "datetime",
                    "range"
                ],
                "contributors": [],
                "code": "from datetime import datetime, timedelta\n\ndef generate_date_range(start_date, end_date):\n    if start_date > end_date:\n        raise ValueError(\"start_date must be before end_date\")\n\n    current_date = start_date\n    date_list = []\n    while current_date <= end_date:\n        date_list.append(current_date)\n        current_date += timedelta(days=1)\n\n    return date_list\n\n# Usage:\nstart = datetime(2023, 1, 1)\nend = datetime(2023, 1, 5)\ndates = generate_date_range(start, end)\nfor d in dates:\n    print(d.strftime('%Y-%m-%d'))\n# Outputs: '2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05'\n"
            },
            {
                "title": "Get Current Date and Time as String",
                "description": "Fetches the current date and time as a formatted string.",
                "author": "e3nviction",
                "tags": [
                    "datetime",
                    "current",
                    "string"
                ],
                "contributors": [],
                "code": "from datetime import datetime\n\ndef get_current_datetime_string():\n    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n# Usage:\nget_current_datetime_string() # Returns: '2023-01-01 12:00:00'\n"
            },
            {
                "title": "Get Number of Days in a Month",
                "description": "Determines the number of days in a specific month and year.",
                "author": "axorax",
                "tags": [
                    "datetime",
                    "calendar"
                ],
                "contributors": [],
                "code": "from calendar import monthrange\nfrom datetime import datetime\n\ndef get_days_in_month(year, month):\n    try:\n        return monthrange(year, month)[1]\n    except ValueError as e:\n        raise ValueError(f\"Invalid month or year: {e}\")\n\n# Usage:\nget_days_in_month(2023, 2) # Returns: 28 (for non-leap year February)\n"
            },
            {
                "title": "Measure Execution Time",
                "description": "Measures the execution time of a code block.",
                "author": "dostonnabotov",
                "tags": [
                    "time",
                    "execution"
                ],
                "contributors": [],
                "code": "import time\n\ndef measure_time(func, *args):\n    start = time.time()\n    result = func(*args)\n    end = time.time()\n    print(f'Execution time: {end - start:.6f} seconds')\n    return result\n\n# Usage:\ndef slow_function():\n    time.sleep(2)\n\nmeasure_time(slow_function) # Outputs an execution time of ~2s\n"
            }
        ]
    },
    {
        "name": "Error Handling",
        "snippets": [
            {
                "title": "Create Custom Exception Type",
                "description": "Create a Custom Exception Type that can be called with raise.",
                "author": "mrcool7387",
                "tags": [
                    "python",
                    "error-creation",
                    "organisation",
                    "utility"
                ],
                "contributors": [],
                "code": "class ExceptionName(BaseException):\n    def __init__(message: str):\n        super().__init__(message)\n\n# Usage\na: int = 1\n\nif a > 0:\n  raise ExceptionName('Error Message')\n"
            },
            {
                "title": "Retry Function Execution on Exception",
                "description": "Retries a function execution a specified number of times if it raises an exception.",
                "author": "axorax",
                "tags": [
                    "error-handling",
                    "retry"
                ],
                "contributors": [],
                "code": "import time\n\ndef retry(func, retries=3, delay=1):\n    for attempt in range(retries):\n        try:\n            return func()\n        except Exception as e:\n            print(f\"Attempt {attempt + 1} failed: {e}\")\n            time.sleep(delay)\n    raise Exception(\"All retry attempts failed\")\n\n# Usage:\ndef unstable_function():\n    raise ValueError(\"Simulated failure\")\n\n# Retry 3 times with 2 seconds delay:\ntry:\n    retry(unstable_function, retries=3, delay=2)\nexcept Exception as e:\n    print(e)  # Output: All retry attempts failed\n"
            }
        ]
    },
    {
        "name": "File Handling",
        "snippets": [
            {
                "title": "Find Files",
                "description": "Finds all files of the specified type within a given directory.",
                "author": "Jackeastern",
                "tags": [
                    "os",
                    "filesystem",
                    "file_search"
                ],
                "contributors": [],
                "code": "import os\n\ndef find_files(directory, file_type):\n  file_type = file_type.lower()  # Convert file_type to lowercase\n  found_files = []\n\n  for root, _, files in os.walk(directory):\n    for file in files:\n      file_ext = os.path.splitext(file)[1].lower()\n      if file_ext == file_type:\n        full_path = os.path.join(root, file)\n        found_files.append(full_path)\n\n  return found_files\n\n# Example Usage:\nfind_files('/path/to/your/directory', '.pdf') # Returns all .pdf in directory\n"
            },
            {
                "title": "Get File Extension",
                "description": "Gets the extension of a file.",
                "author": "axorax",
                "tags": [
                    "file",
                    "extension"
                ],
                "contributors": [],
                "code": "import os\n\ndef get_file_extension(filepath):\n    return os.path.splitext(filepath)[1]\n\n# Usage:\nget_file_extension('example.txt') # Returns: '.txt'\n"
            },
            {
                "title": "List Files in Directory",
                "description": "Lists all files in a specified directory.",
                "author": "axorax",
                "tags": [
                    "file",
                    "list",
                    "directory"
                ],
                "contributors": [],
                "code": "import os\n\ndef list_files(directory):\n    return [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n\n# Usage:\nlist_files('/path/to/directory') # Returns: List of file in the directory\n"
            },
            {
                "title": "Read File in Chunks",
                "description": "Reads a file in chunks of a specified size.",
                "author": "axorax",
                "tags": [
                    "file",
                    "read",
                    "chunks"
                ],
                "contributors": [],
                "code": "def read_file_in_chunks(filepath, chunk_size):\n    with open(filepath, 'r') as file:\n        while chunk := file.read(chunk_size):\n            yield chunk\n\n# Usage:\nfor chunk in read_file_in_chunks('example.txt', 1024):\n    print(chunk) # Outputs: Chucks of 1024 bytes\n"
            }
        ]
    },
    {
        "name": "Json Manipulation",
        "snippets": [
            {
                "title": "Filter JSON Data",
                "description": "Filters a JSON object based on a condition and returns the filtered data.",
                "author": "axorax",
                "tags": [
                    "json",
                    "filter",
                    "data"
                ],
                "contributors": [],
                "code": "import json\n\ndef filter_json_data(filepath, condition):\n    with open(filepath, 'r') as file:\n        data = json.load(file)\n\n    # Filter data based on the provided condition\n    filtered_data = [item for item in data if condition(item)]\n\n    return filtered_data\n\n# Usage:\ncondition = lambda x: x['age'] > 25\nfilter_json_data('data.json', condition) # Returns: `data.json` filtered with `condition`\n"
            },
            {
                "title": "Flatten Nested JSON",
                "description": "Flattens a nested JSON object into a flat dictionary.",
                "author": "axorax",
                "tags": [
                    "json",
                    "flatten",
                    "nested"
                ],
                "contributors": [],
                "code": "def flatten_json(nested_json, prefix=''):\n    flat_dict = {}\n    for key, value in nested_json.items():\n        if isinstance(value, dict):\n            flat_dict.update(flatten_json(value, prefix + key + '.'))\n        else:\n            flat_dict[prefix + key] = value\n    return flat_dict\n\n# Usage:\nnested_json = {'name': 'John', 'address': {'city': 'New York', 'zip': '10001'}}\nflatten_json(nested_json) # Returns: {'name': 'John', 'address.city': 'New York', 'address.zip': '10001'}\n"
            },
            {
                "title": "Merge Multiple JSON Files",
                "description": "Merges multiple JSON files into one and writes the merged data into a new file.",
                "author": "axorax",
                "tags": [
                    "json",
                    "merge",
                    "file"
                ],
                "contributors": [],
                "code": "import json\n\ndef merge_json_files(filepaths, output_filepath):\n    merged_data = []\n\n    # Read each JSON file and merge their data\n    for filepath in filepaths:\n        with open(filepath, 'r') as file:\n            data = json.load(file)\n            merged_data.extend(data)\n\n    # Write the merged data into a new file\n    with open(output_filepath, 'w') as file:\n        json.dump(merged_data, file, indent=4)\n\n# Usage:\nfiles_to_merge = ['file1.json', 'file2.json']\nmerge_json_files(files_to_merge, 'merged.json')\n"
            },
            {
                "title": "Read JSON File",
                "description": "Reads a JSON file and parses its content.",
                "author": "e3nviction",
                "tags": [
                    "json",
                    "file",
                    "read"
                ],
                "contributors": [],
                "code": "import json\n\ndef read_json(filepath):\n    with open(filepath, 'r') as file:\n        return json.load(file)\n\n# Usage:\nread_json('data.json') # Returns: Content of file as dict\n"
            },
            {
                "title": "Update JSON File",
                "description": "Updates an existing JSON file with new data or modifies the existing values.",
                "author": "axorax",
                "tags": [
                    "json",
                    "update",
                    "file"
                ],
                "contributors": [],
                "code": "import json\n\ndef update_json(filepath, new_data):\n    # Read the existing JSON data\n    with open(filepath, 'r') as file:\n        data = json.load(file)\n\n    # Update the data with the new content\n    data.update(new_data)\n\n    # Write the updated data back to the JSON file\n    with open(filepath, 'w') as file:\n        json.dump(data, file, indent=4)\n\n# Usage:\nnew_data = {'age': 31}\nupdate_json('data.json', new_data) # Updates `age` in `data.json` without modifying other keys\n"
            },
            {
                "title": "Write JSON File",
                "description": "Writes a dictionary to a JSON file.",
                "author": "e3nviction",
                "tags": [
                    "json",
                    "file",
                    "write"
                ],
                "contributors": [],
                "code": "import json\n\ndef write_json(filepath, data):\n    with open(filepath, 'w') as file:\n        json.dump(data, file, indent=4)\n\n# Usage:\ndata = {'name': 'John', 'age': 30}\nwrite_json('data.json', data)\n"
            }
        ]
    },
    {
        "name": "List Manipulation",
        "snippets": [
            {
                "title": "Find Duplicates in a List",
                "description": "Identifies duplicate elements in a list.",
                "author": "axorax",
                "tags": [
                    "list",
                    "duplicates"
                ],
                "contributors": [],
                "code": "def find_duplicates(lst):\n    seen = set()\n    duplicates = set()\n    for item in lst:\n        if item in seen:\n            duplicates.add(item)\n        else:\n            seen.add(item)\n    return list(duplicates)\n\n# Usage:\ndata = [1, 2, 3, 2, 4, 5, 1]\nfind_duplicates(data) # Returns: [1, 2]\n"
            },
            {
                "title": "Find Intersection of Two Lists",
                "description": "Finds the common elements between two lists.",
                "author": "axorax",
                "tags": [
                    "list",
                    "intersection"
                ],
                "contributors": [],
                "code": "def list_intersection(lst1, lst2):\n    return [item for item in lst1 if item in lst2]\n\n# Usage:\nlist_a = [1, 2, 3, 4]\nlist_b = [3, 4, 5, 6]\nlist_intersection(list_a, list_b) # Returns: [3, 4]\n"
            },
            {
                "title": "Find Maximum Difference in List",
                "description": "Finds the maximum difference between any two elements in a list.",
                "author": "axorax",
                "tags": [
                    "list",
                    "difference"
                ],
                "contributors": [],
                "code": "def max_difference(lst):\n    if not lst or len(lst) < 2:\n        return 0\n    return max(lst) - min(lst)\n\n# Usage:\ndata = [10, 3, 5, 20, 7]\nmax_difference(data) # Returns: 17\n"
            },
            {
                "title": "Flatten Nested List",
                "description": "Flattens a multi-dimensional list into a single list.",
                "author": "dostonnabotov",
                "tags": [
                    "list",
                    "flatten"
                ],
                "contributors": [],
                "code": "def flatten_list(lst):\n    return [item for sublist in lst for item in sublist]\n\n# Usage:\nnested_list = [[1, 2], [3, 4], [5]]\nflatten_list(nested_list)  # Returns: [1, 2, 3, 4, 5]\n"
            },
            {
                "title": "Flatten Unevenly Nested Lists",
                "description": "Converts unevenly nested lists of any depth into a single flat list.",
                "author": "agilarasu",
                "tags": [
                    "list",
                    "flattening",
                    "nested-lists",
                    "depth"
                ],
                "contributors": [],
                "code": "def flatten(nested_list):\n    for item in nested_list:\n        if isinstance(item, list):\n            yield from flatten(item)\n        else:\n            yield item\n\n# Usage:\nnested_list = [1, [2, [3, 4]], 5]\nlist(flatten(nested_list))  # Returns: [1, 2, 3, 4, 5]\n"
            },
            {
                "title": "Partition List",
                "description": "Partitions a list into sublists of a given size.",
                "author": "axorax",
                "tags": [
                    "list",
                    "partition"
                ],
                "contributors": [],
                "code": "def partition_list(lst, size):\n    for i in range(0, len(lst), size):\n        yield lst[i:i + size]\n\n# Usage:\ndata = [1, 2, 3, 4, 5, 6, 7]\nlist(partition_list(data, 3)) # Returns: [[1, 2, 3], [4, 5, 6], [7]]\n"
            },
            {
                "title": "Remove Duplicates",
                "description": "Removes duplicate elements from a list while maintaining order.",
                "author": "dostonnabotov",
                "tags": [
                    "list",
                    "duplicates",
                    "filter"
                ],
                "contributors": [],
                "code": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))\n\n# Usage:\nremove_duplicates([1, 2, 2, 3, 4, 4, 5])  # Returns: [1, 2, 3, 4, 5]\n"
            }
        ]
    },
    {
        "name": "Math And Numbers",
        "snippets": [
            {
                "title": "Calculate Compound Interest",
                "description": "Calculates compound interest for a given principal amount, rate, and time period.",
                "author": "axorax",
                "tags": [
                    "python",
                    "math",
                    "compound interest",
                    "finance"
                ],
                "contributors": [],
                "code": "def compound_interest(principal, rate, time, n=1):\n    return principal * (1 + rate / n) ** (n * time)\n\n# Usage:\ncompound_interest(1000, 0.05, 5) # Returns: 1276.2815625000003\ncompound_interest(1000, 0.05, 5, 12) # Returns: 1283.68\n"
            },
            {
                "title": "Check Perfect Square",
                "description": "Checks if a number is a perfect square.",
                "author": "axorax",
                "tags": [
                    "math",
                    "perfect square",
                    "check"
                ],
                "contributors": [],
                "code": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n**0.5)\n    return root * root == n\n\n# Usage:\nis_perfect_square(16) # Returns: True\nis_perfect_square(20) # Returns: False\n"
            },
            {
                "title": "Check Prime Number",
                "description": "Checks if a number is a prime number.",
                "author": "dostonnabotov",
                "tags": [
                    "math",
                    "prime",
                    "check"
                ],
                "contributors": [],
                "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Usage:\nis_prime(17) # Returns: True\n"
            },
            {
                "title": "Convert Binary to Decimal",
                "description": "Converts a binary string to its decimal equivalent.",
                "author": "axorax",
                "tags": [
                    "math",
                    "binary",
                    "decimal",
                    "conversion"
                ],
                "contributors": [],
                "code": "def binary_to_decimal(binary_str):\n    return int(binary_str, 2)\n\n# Usage:\nbinary_to_decimal('1010') # Returns: 10\nbinary_to_decimal('1101') # Returns: 13\n"
            },
            {
                "title": "Convert Bytes to Human-Readable Format",
                "description": "Converts a size in bytes to a human-readable format.",
                "author": "axorax",
                "tags": [
                    "bytes",
                    "format"
                ],
                "contributors": [],
                "code": "def bytes_to_human_readable(num):\n    for unit in ['B', 'KB', 'MB', 'GB', 'TB', 'PB']:\n        if num < 1024:\n            return f\"{num:.2f} {unit}\"\n        num /= 1024\n\n# Usage:\nbytes_to_human_readable(123456789) # Returns: '117.74 MB'\n"
            },
            {
                "title": "Find LCM (Least Common Multiple)",
                "description": "Calculates the least common multiple (LCM) of two numbers.",
                "author": "axorax",
                "tags": [
                    "python",
                    "math",
                    "lcm",
                    "gcd",
                    "utility"
                ],
                "contributors": [],
                "code": "def lcm(a, b):\n    return abs(a * b) // gcd(a, b)\n\n# Usage:\nlcm(12, 15) # Returns: 60\nlcm(7, 5) # Returns: 35\n"
            },
            {
                "title": "Solve Quadratic Equation",
                "description": "Solves a quadratic equation ax^2 + bx + c = 0 and returns the roots.",
                "author": "axorax",
                "tags": [
                    "math",
                    "quadratic",
                    "equation",
                    "solver"
                ],
                "contributors": [],
                "code": "import cmath\n\ndef solve_quadratic(a, b, c):\n    discriminant = cmath.sqrt(b**2 - 4 * a * c)\n    root1 = (-b + discriminant) / (2 * a)\n    root2 = (-b - discriminant) / (2 * a)\n    return root1, root2\n\n# Usage:\nsolve_quadratic(1, -3, 2) # Returns: ((2+0j), (1+0j))\nsolve_quadratic(1, 2, 5) # Returns: ((-1+2j), (-1-2j))\n"
            }
        ]
    },
    {
        "name": "Sqlite Database",
        "snippets": [
            {
                "title": "Create SQLite Database Table",
                "description": "Creates a table in an SQLite database with a dynamic schema.",
                "author": "e3nviction",
                "tags": [
                    "sqlite",
                    "database",
                    "table"
                ],
                "contributors": [],
                "code": "import sqlite3\n\ndef create_table(db_name, table_name, schema):\n    conn = sqlite3.connect(db_name)\n    cursor = conn.cursor()\n    schema_string = ', '.join([f'{col} {dtype}' for col, dtype in schema.items()])\n    cursor.execute(f'''\n        CREATE TABLE IF NOT EXISTS {table_name} (\n            {schema_string}\n        )''')\n    conn.commit()\n    conn.close()\n\n# Usage:\ndb_name = 'example.db'\ntable_name = 'users'\nschema = {\n    'id': 'INTEGER PRIMARY KEY',\n    'name': 'TEXT',\n    'age': 'INTEGER',\n    'email': 'TEXT'\n}\ncreate_table(db_name, table_name, schema)\n"
            },
            {
                "title": "Insert Data into Sqlite Table",
                "description": "Inserts a row into a specified SQLite table using a dictionary of fields and values.",
                "author": "e3nviction",
                "tags": [
                    "sqlite",
                    "database"
                ],
                "contributors": [],
                "code": "import sqlite3\n\ndef insert_into_table(db_path, table_name, data):\n    with sqlite3.connect(db_path) as conn:\n        columns = ', '.join(data.keys())\n        placeholders = ', '.join(['?'] * len(data))\n        sql = f\"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})\"\n        conn.execute(sql, tuple(data.values()))\n        conn.commit()\n\n# Usage:\ndb_path = 'example.db'\ntable_name = 'users'\ndata = {\n    'name': 'John Doe',\n    'email': 'john@example.com',\n    'age': 30\n}\ninsert_into_table(db_path, table_name, data)\n"
            },
            {
                "title": "Query Data from Sqlite Table",
                "description": "Fetches data from a specified SQLite table, with options for selecting specific columns and applying a WHERE clause.",
                "author": "pl44t",
                "tags": [
                    "sqlite",
                    "database"
                ],
                "contributors": [],
                "code": "import sqlite3\n\ndef query_table(db_path, table_name, columns='*', where_clause=None):\n    with sqlite3.connect(db_path) as conn:\n        cursor = conn.cursor()\n        sql = f\"SELECT {columns} FROM {table_name}\"\n        if where_clause:\n            sql += f\" WHERE {where_clause}\"\n        cursor.execute(sql)\n        return cursor.fetchall()\n\n# Usage:\ndb_path = 'example.db'\ntable_name = 'users'\ncolumns = 'id, name, email'\nwhere_clause = 'age > 25'\nresult = query_table(db_path, table_name, columns, where_clause)\nfor row in result:\n    print(row)\n\n"
            },
            {
                "title": "Update Records in Sqlite Table",
                "description": "Updates records in a specified SQLite table, allowing dynamic column updates and an optional WHERE clause.",
                "author": "pl44t",
                "tags": [
                    "sqlite",
                    "database"
                ],
                "contributors": [],
                "code": "import sqlite3\n\ndef update_table(db_path, table_name, updates, where_clause=None):\n    with sqlite3.connect(db_path) as conn:\n        set_clause = ', '.join([f\"{col} = ?\" for col in updates.keys()])\n        sql = f\"UPDATE {table_name} SET {set_clause}\"\n        if where_clause:\n            sql += f\" WHERE {where_clause}\"\n        conn.execute(sql, tuple(updates.values()))\n        conn.commit()\n\n# Usage:\ndb_path = 'example.db'\ntable_name = 'users'\nupdates = {'name': 'Jane Doe', 'age': 28}\nwhere_clause = \"id = 1\"\nupdate_table(db_path, table_name, updates, where_clause)\n\n"
            }
        ]
    },
    {
        "name": "String Manipulation",
        "snippets": [
            {
                "title": "Capitalize Words",
                "description": "Capitalizes the first letter of each word in a string.",
                "author": "axorax",
                "tags": [
                    "string",
                    "capitalize"
                ],
                "contributors": [],
                "code": "def capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())\n\n# Usage:\ncapitalize_words('hello world') # Returns: 'Hello World'\n"
            },
            {
                "title": "Check Anagram",
                "description": "Checks if two strings are anagrams of each other.",
                "author": "SteliosGee",
                "tags": [
                    "string",
                    "anagram",
                    "check"
                ],
                "contributors": [],
                "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)\n\n# Usage:\nis_anagram('listen', 'silent') # Returns: True\n"
            },
            {
                "title": "Check Palindrome",
                "description": "Checks if a string is a palindrome.",
                "author": "dostonnabotov",
                "tags": [
                    "string",
                    "palindrome"
                ],
                "contributors": [],
                "code": "def is_palindrome(s):\n    s = s.lower().replace(' ', '')\n    return s == s[::-1]\n\n# Usage:\nis_palindrome('A man a plan a canal Panama') # Returns: True\n"
            },
            {
                "title": "Convert Snake Case to Camel Case",
                "description": "Converts a snake_case string to camelCase.",
                "author": "axorax",
                "tags": [
                    "string",
                    "snake-case",
                    "camel-case",
                    "convert"
                ],
                "contributors": [],
                "code": "def snake_to_camel(s):\n    parts = s.split('_')\n    return parts[0] + ''.join(word.capitalize() for word in parts[1:])\n\n# Usage:\nsnake_to_camel('hello_world') # Returns: 'helloWorld'\n"
            },
            {
                "title": "Convert String to ASCII",
                "description": "Converts a string into its ASCII representation.",
                "author": "axorax",
                "tags": [
                    "string",
                    "ascii",
                    "convert"
                ],
                "contributors": [],
                "code": "def string_to_ascii(s):\n    return [ord(char) for char in s]\n\n# Usage:\nstring_to_ascii('hello') # Returns: [104, 101, 108, 108, 111]\n"
            },
            {
                "title": "Count Character Frequency",
                "description": "Counts the frequency of each character in a string.",
                "author": "axorax",
                "tags": [
                    "string",
                    "character-frequency"
                ],
                "contributors": [],
                "code": "from collections import Counter\n\ndef char_frequency(s):\n    return dict(Counter(s))\n\n# Usage:\nchar_frequency('hello') # Returns: {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n"
            },
            {
                "title": "Count Vowels",
                "description": "Counts the number of vowels in a string.",
                "author": "SteliosGee",
                "tags": [
                    "string",
                    "vowels",
                    "count"
                ],
                "contributors": [],
                "code": "def count_vowels(s):\n    vowels = 'aeiou'\n    return len([char for char in s.lower() if char in vowels])\n\n# Usage:\ncount_vowels('hello') # Returns: 2\n"
            },
            {
                "title": "Count Words",
                "description": "Counts the number of words in a string.",
                "author": "axorax",
                "tags": [
                    "string",
                    "word-count"
                ],
                "contributors": [],
                "code": "def count_words(s):\n    return len(s.split())\n\n# Usage:\ncount_words('The quick brown fox') # Returns: 4\n"
            },
            {
                "title": "Find All Substrings",
                "description": "Finds all substrings of a given string.",
                "author": "axorax",
                "tags": [
                    "string",
                    "substring",
                    "find"
                ],
                "contributors": [],
                "code": "def find_substrings(s):\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings\n\n# Usage:\nfind_substrings('abc') # Returns: ['a', 'ab', 'abc', 'b', 'bc', 'c']\n"
            },
            {
                "title": "Find Longest Word",
                "description": "Finds the longest word in a string.",
                "author": "axorax",
                "tags": [
                    "string",
                    "longest-word"
                ],
                "contributors": [],
                "code": "def find_longest_word(s):\n    words = s.split()\n    return max(words, key=len) if words else ''\n\n# Usage:\nfind_longest_word('The quick brown fox') # Returns: 'quick'\n"
            },
            {
                "title": "Find Unique Characters",
                "description": "Finds all unique characters in a string.",
                "author": "axorax",
                "tags": [
                    "string",
                    "unique",
                    "characters"
                ],
                "contributors": [],
                "code": "def find_unique_chars(s):\n    return ''.join(sorted(set(s)))\n\n# Usage:\nfind_unique_chars('banana') # Results: 'abn'\n"
            },
            {
                "title": "Generate Random String",
                "description": "Generates a random alphanumeric string.",
                "author": "dostonnabotov",
                "tags": [
                    "random",
                    "string"
                ],
                "contributors": [],
                "code": "import random\nimport string\n\ndef random_string(length):\n    letters_and_digits = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters_and_digits) for _ in range(length))\n\n# Usage:\nrandom_string(10) # Results: Random 10-character string\n"
            },
            {
                "title": "Remove Duplicate Characters",
                "description": "Removes duplicate characters from a string while maintaining the order.",
                "author": "axorax",
                "tags": [
                    "string",
                    "duplicates",
                    "remove"
                ],
                "contributors": [],
                "code": "def remove_duplicate_chars(s):\n    seen = set()\n    return ''.join(char for char in s if not (char in seen or seen.add(char)))\n\n# Usage:\nremove_duplicate_chars('programming') # Returns: 'progamin'\n"
            },
            {
                "title": "Remove Punctuation",
                "description": "Removes punctuation from a string.",
                "author": "SteliosGee",
                "tags": [
                    "string",
                    "punctuation",
                    "remove"
                ],
                "contributors": [],
                "code": "import string\n\ndef remove_punctuation(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\n# Usage:\nremove_punctuation('Hello, World!') # Returns: 'Hello World'\n"
            },
            {
                "title": "Remove Specific Characters",
                "description": "Removes specific characters from a string.",
                "author": "axorax",
                "tags": [
                    "string",
                    "remove",
                    "characters"
                ],
                "contributors": [],
                "code": "def remove_chars(s, chars):\n    return ''.join(c for c in s if c not in chars)\n\n# Usage:\nremove_chars('hello world', 'eo') # Returns: 'hll wrld'\n"
            },
            {
                "title": "Remove Whitespace",
                "description": "Removes all whitespace from a string.",
                "author": "axorax",
                "tags": [
                    "string",
                    "whitespace",
                    "remove"
                ],
                "contributors": [],
                "code": "def remove_whitespace(s):\n    return ''.join(s.split())\n\n# Usage:\nremove_whitespace('hello world') # Returns: 'helloworld'\n"
            },
            {
                "title": "Reverse String",
                "description": "Reverses the characters in a string.",
                "author": "dostonnabotov",
                "tags": [
                    "string",
                    "reverse"
                ],
                "contributors": [],
                "code": "def reverse_string(s):\n    return s[::-1]\n\n# Usage:\nreverse_string('hello') # Returns: 'olleh'\n"
            },
            {
                "title": "Split Camel Case",
                "description": "Splits a camel case string into separate words.",
                "author": "axorax",
                "tags": [
                    "string",
                    "camel-case",
                    "split"
                ],
                "contributors": [],
                "code": "import re\n\ndef split_camel_case(s):\n    return ' '.join(re.findall(r'[A-Z][a-z]*|[a-z]+', s))\n\n# Usage:\nsplit_camel_case('camelCaseString') # Returns: 'camel Case String'\n"
            },
            {
                "title": "Truncate String",
                "description": "Truncates a string to a specified length and adds an ellipsis.",
                "author": "axorax",
                "tags": [
                    "string",
                    "truncate"
                ],
                "contributors": [],
                "code": "def truncate_string(s, length):\n    return s[:length] + '...' if len(s) > length else s\n\n# Usage:\ntruncate_string('This is a long string', 10) # Returns: 'This is a ...'\n"
            }
        ]
    }
]